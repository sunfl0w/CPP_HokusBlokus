/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#elif PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    if (PyBytes_AsStringAndSize(str, &cstr, &len) != -1) {
      newstr = (char *) malloc(len+1);
      if (newstr)
        memcpy(newstr, cstr, len+1);
    }
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03030000 || PY_VERSION_HEX < 0x03000000
#  define SWIG_Python_str_DelForPy3(x)
#else
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    return PyDict_SetItem(dict, SWIG_This(), swig_this);
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Board swig_types[0]
#define SWIGTYPE_p_Color swig_types[1]
#define SWIGTYPE_p_HokusBlokus__Blokus__AI__Logic swig_types[2]
#define SWIGTYPE_p_HokusBlokus__Blokus__Board swig_types[3]
#define SWIGTYPE_p_HokusBlokus__Blokus__Client__BlokusClient swig_types[4]
#define SWIGTYPE_p_HokusBlokus__Blokus__Client__TCP_Client swig_types[5]
#define SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message swig_types[6]
#define SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter swig_types[7]
#define SWIGTYPE_p_HokusBlokus__Blokus__GameState swig_types[8]
#define SWIGTYPE_p_HokusBlokus__Blokus__Move swig_types[9]
#define SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRect swig_types[10]
#define SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer swig_types[11]
#define SWIGTYPE_p_HokusBlokus__Blokus__Piece swig_types[12]
#define SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask swig_types[13]
#define SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement swig_types[14]
#define SWIGTYPE_p_HokusBlokus__Blokus__PieceManager swig_types[15]
#define SWIGTYPE_p_HokusBlokus__Blokus__Player swig_types[16]
#define SWIGTYPE_p_HokusBlokus__Blokus__Vec2i swig_types[17]
#define SWIGTYPE_p_Move swig_types[18]
#define SWIGTYPE_p_MoveType swig_types[19]
#define SWIGTYPE_p_PieceRotation swig_types[20]
#define SWIGTYPE_p_PieceShape swig_types[21]
#define SWIGTYPE_p_Player swig_types[22]
#define SWIGTYPE_p_SC_MessageType swig_types[23]
#define SWIGTYPE_p_Vec2i swig_types[24]
#define SWIGTYPE_p_allocator_type swig_types[25]
#define SWIGTYPE_p_char swig_types[26]
#define SWIGTYPE_p_difference_type swig_types[27]
#define SWIGTYPE_p_p_PyObject swig_types[28]
#define SWIGTYPE_p_p_char swig_types[29]
#define SWIGTYPE_p_size_type swig_types[30]
#define SWIGTYPE_p_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t swig_types[31]
#define SWIGTYPE_p_std__allocatorT_HokusBlokus__Blokus__Move_t swig_types[32]
#define SWIGTYPE_p_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t swig_types[33]
#define SWIGTYPE_p_std__allocatorT_int_t swig_types[34]
#define SWIGTYPE_p_std__arrayT_HokusBlokus__Blokus__Color_2_t swig_types[35]
#define SWIGTYPE_p_std__arrayT_HokusBlokus__Blokus__PieceBitmask_3_t swig_types[36]
#define SWIGTYPE_p_std__bitsetT_484_t swig_types[37]
#define SWIGTYPE_p_std__invalid_argument swig_types[38]
#define SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t swig_types[39]
#define SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t swig_types[40]
#define SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t swig_types[41]
#define SWIGTYPE_p_std__vectorT_Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t swig_types[42]
#define SWIGTYPE_p_std__vectorT_PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t swig_types[43]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[44]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[45]
#define SWIGTYPE_p_value_type swig_types[46]
static swig_type_info *swig_types[48];
static swig_module_info swig_module = {swig_types, 47, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _Blokus.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__Blokus

#else
#  define SWIG_init    init_Blokus

#endif
#define SWIG_name    "_Blokus"

#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


    #define SWIG_FILE_WITH_INIT
    #include "vec2i.hpp"
    #include "logic.hpp"
    #include "benchmark.hpp"
    #include "scMessageType.hpp"
    #include "scMessage.hpp"
    #include "scMessageConverter.hpp"
    #include "blokusClient.hpp"
    #include "tcpClient.hpp"
    #include "boundingRect.hpp"
    #include "boundingRectOptimizer.hpp"
    #include "board.hpp"
    #include "color.hpp"
    #include "gameState.hpp"
    #include "maskType.hpp"
    #include "move.hpp"
    #include "moveType.hpp"
    #include "pieceRotation.hpp"
    #include "piece.hpp"
    #include "pieceBitmask.hpp"
    #include "pieceBitmaskComplement.hpp"
    #include "pieceManager.hpp"
    #include "pieceShape.hpp"
    #include "player.hpp"

    using namespace HokusBlokus::Util;
    using namespace HokusBlokus::Util::Logging;
    using namespace HokusBlokus::PBM;
    using namespace HokusBlokus::Blokus;
    using namespace HokusBlokus::Blokus::AI;
    using namespace HokusBlokus::Blokus::Benchmark;
    using namespace HokusBlokus::Blokus::Client;
    using namespace HokusBlokus::Blokus::Communication;
    using namespace HokusBlokus::Blokus::Optimization;
    

#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <utility>


#include <vector>


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsArgcArgv(PyObject *input,
		swig_type_info *ppchar_info,
		size_t *argc, char ***argv, int *owner)
{  
  void *vptr;
  int res = SWIG_ConvertPtr(input, &vptr, ppchar_info, 0);
  if (!SWIG_IsOK(res)) {
    int list = 0;
    PyErr_Clear();
    list = PyList_Check(input);
    if (list || PyTuple_Check(input)) {
      size_t i = 0;
      size_t size = list ? PyList_Size(input) : PyTuple_Size(input);
      if (argc) *argc = size;
      if (argv) {
	*argv = (new char*[size + 1]());
	for (; i < size; ++i) {
	  PyObject *obj = list ? PyList_GetItem(input,i) : PyTuple_GetItem(input,i);
	  char *cptr = 0; size_t sz = 0; int alloc = 0;
	  res = SWIG_AsCharPtrAndSize(obj, &cptr, &sz, &alloc);
	  if (SWIG_IsOK(res)) {
	    if (cptr && sz) {
	      (*argv)[i] = (alloc == SWIG_NEWOBJ) ? cptr : reinterpret_cast< char* >(memcpy(new char[sz], cptr, sizeof(char)*(sz)));
	    } else {
	      (*argv)[i] = 0;
	    }
	  } else {
	    return SWIG_TypeError;
	  }
	}
	(*argv)[i] = 0;
	if (owner) *owner = 1;
      } else {
	for (; i < size; ++i) {
	  PyObject *obj = list ? PyList_GetItem(input,i) : PyTuple_GetItem(input,i);
	  res = SWIG_AsCharPtrAndSize(obj, 0, 0, 0);
	  if (!SWIG_IsOK(res)) return SWIG_TypeError;
	}
	if (owner) *owner = 0;
      }
      return SWIG_OK;
    } else {
      return SWIG_TypeError;
    }
  } else {
    /* seems dangerous, but the user asked for it... */
    size_t i = 0;
    if (argv) { while (*argv[i] != 0) ++i;}    
    if (argc) *argc = i;
    if (owner) *owner = 0;
    return SWIG_OK;
  }
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check() const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item))
	  return false;
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits< HokusBlokus::Blokus::Communication::SC_Message > {
      typedef pointer_category category;
      static const char* type_name() { return"HokusBlokus::Blokus::Communication::SC_Message"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< HokusBlokus::Blokus::Communication::SC_Message, std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "HokusBlokus::Blokus::Communication::SC_Message" "," "std::allocator< HokusBlokus::Blokus::Communication::SC_Message >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__iterator(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____nonzero__(std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____bool__(std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____len__(std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____getslice__(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type i,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____setslice____SWIG_0(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type i,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >());
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____setslice____SWIG_1(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type i,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type j,std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____delslice__(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type i,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____delitem____SWIG_0(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____getitem____SWIG_0(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____setitem____SWIG_0(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,PySliceObject *slice,std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____setitem____SWIG_1(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____delitem____SWIG_1(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____getitem____SWIG_1(std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____setitem____SWIG_2(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type i,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__pop(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__append(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__erase__SWIG_0(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__erase__SWIG_1(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator first,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__insert__SWIG_0(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator pos,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__insert__SWIG_1(std::vector< HokusBlokus::Blokus::Communication::SC_Message > *self,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator pos,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type n,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< HokusBlokus::Blokus::Move > {
      typedef pointer_category category;
      static const char* type_name() { return"HokusBlokus::Blokus::Move"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< HokusBlokus::Blokus::Move, std::allocator< HokusBlokus::Blokus::Move > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "HokusBlokus::Blokus::Move" "," "std::allocator< HokusBlokus::Blokus::Move >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_HokusBlokus_Blokus_Move_Sg__iterator(std::vector< HokusBlokus::Blokus::Move > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_HokusBlokus_Blokus_Move_Sg____nonzero__(std::vector< HokusBlokus::Blokus::Move > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_HokusBlokus_Blokus_Move_Sg____bool__(std::vector< HokusBlokus::Blokus::Move > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Move >::size_type std_vector_Sl_HokusBlokus_Blokus_Move_Sg____len__(std::vector< HokusBlokus::Blokus::Move > const *self){
      return self->size();
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *std_vector_Sl_HokusBlokus_Blokus_Move_Sg____getslice__(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::difference_type i,std::vector< HokusBlokus::Blokus::Move >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Move_Sg____setslice____SWIG_0(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::difference_type i,std::vector< HokusBlokus::Blokus::Move >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >());
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Move_Sg____setslice____SWIG_1(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::difference_type i,std::vector< HokusBlokus::Blokus::Move >::difference_type j,std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Move_Sg____delslice__(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::difference_type i,std::vector< HokusBlokus::Blokus::Move >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Move_Sg____delitem____SWIG_0(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *std_vector_Sl_HokusBlokus_Blokus_Move_Sg____getitem____SWIG_0(std::vector< HokusBlokus::Blokus::Move > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Move_Sg____setitem____SWIG_0(std::vector< HokusBlokus::Blokus::Move > *self,PySliceObject *slice,std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Move_Sg____setitem____SWIG_1(std::vector< HokusBlokus::Blokus::Move > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Move_Sg____delitem____SWIG_1(std::vector< HokusBlokus::Blokus::Move > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Move >::value_type const &std_vector_Sl_HokusBlokus_Blokus_Move_Sg____getitem____SWIG_1(std::vector< HokusBlokus::Blokus::Move > const *self,std::vector< HokusBlokus::Blokus::Move >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Move_Sg____setitem____SWIG_2(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::difference_type i,std::vector< HokusBlokus::Blokus::Move >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Move >::value_type std_vector_Sl_HokusBlokus_Blokus_Move_Sg__pop(std::vector< HokusBlokus::Blokus::Move > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Move_Sg__append(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::Move >::iterator std_vector_Sl_HokusBlokus_Blokus_Move_Sg__erase__SWIG_0(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< HokusBlokus::Blokus::Move >::iterator std_vector_Sl_HokusBlokus_Blokus_Move_Sg__erase__SWIG_1(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::iterator first,std::vector< HokusBlokus::Blokus::Move >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< HokusBlokus::Blokus::Move >::iterator std_vector_Sl_HokusBlokus_Blokus_Move_Sg__insert__SWIG_0(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::iterator pos,std::vector< HokusBlokus::Blokus::Move >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_Move_Sg__insert__SWIG_1(std::vector< HokusBlokus::Blokus::Move > *self,std::vector< HokusBlokus::Blokus::Move >::iterator pos,std::vector< HokusBlokus::Blokus::Move >::size_type n,std::vector< HokusBlokus::Blokus::Move >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< HokusBlokus::Blokus::PieceBitmaskComplement > {
      typedef pointer_category category;
      static const char* type_name() { return"HokusBlokus::Blokus::PieceBitmaskComplement"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement, std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "HokusBlokus::Blokus::PieceBitmaskComplement" "," "std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__iterator(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____nonzero__(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____bool__(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____len__(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *self){
      return self->size();
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____getslice__(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type i,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____setslice____SWIG_0(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type i,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >());
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____setslice____SWIG_1(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type i,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type j,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____delslice__(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type i,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____delitem____SWIG_0(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____getitem____SWIG_0(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____setitem____SWIG_0(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,PySliceObject *slice,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____setitem____SWIG_1(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____delitem____SWIG_1(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >::difference_type id = i;
      std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____getitem____SWIG_1(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____setitem____SWIG_2(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type i,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__pop(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__append(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__erase__SWIG_0(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__erase__SWIG_1(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator first,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__insert__SWIG_0(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator pos,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__insert__SWIG_1(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *self,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator pos,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type n,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &x){ self->insert(pos, n, x); }

namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_int_Sg__iterator(std::vector< int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_int_Sg____bool__(std::vector< int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< int >::size_type std_vector_Sl_int_Sg____len__(std::vector< int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< int,std::allocator< int > >());
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice____SWIG_1(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j,std::vector< int,std::allocator< int > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_0(std::vector< int > *self,std::vector< int >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< int,std::allocator< int > > *std_vector_Sl_int_Sg____getitem____SWIG_0(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_0(std::vector< int > *self,PySliceObject *slice,std::vector< int,std::allocator< int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem____SWIG_1(std::vector< int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< int,std::allocator< int > >::difference_type id = i;
      std::vector< int,std::allocator< int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg____getitem____SWIG_1(std::vector< int > const *self,std::vector< int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem____SWIG_2(std::vector< int > *self,std::vector< int >::difference_type i,std::vector< int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__pop(std::vector< int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< int,std::allocator< int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector< int > *self,std::vector< int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__erase__SWIG_1(std::vector< int > *self,std::vector< int >::iterator first,std::vector< int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< int >::iterator std_vector_Sl_int_Sg__insert__SWIG_0(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_int_Sg__insert__SWIG_1(std::vector< int > *self,std::vector< int >::iterator pos,std::vector< int >::size_type n,std::vector< int >::value_type const &x){ self->insert(pos, n, x); }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "swigInterface.hpp"

SwigDirector_Logic::SwigDirector_Logic(PyObject *self): HokusBlokus::Blokus::AI::Logic(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((HokusBlokus::Blokus::AI::Logic *)this, this); 
}




SwigDirector_Logic::~SwigDirector_Logic() {
}

HokusBlokus::Blokus::Move SwigDirector_Logic::GetNextMove(HokusBlokus::Blokus::GameState currentGameState, int ownPlayerID) {
  void *swig_argp ;
  int swig_res = 0 ;
  
  HokusBlokus::Blokus::Move c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(new HokusBlokus::Blokus::GameState((const HokusBlokus::Blokus::GameState &)currentGameState)), SWIGTYPE_p_HokusBlokus__Blokus__GameState, SWIG_POINTER_OWN |  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_int(static_cast< int >(ownPlayerID));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Logic.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "GetNextMove";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("GetNextMove");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0,(PyObject *)obj1, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Logic.GetNextMove'");
    }
  }
  swig_res = SWIG_ConvertPtr(result,&swig_argp,SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""HokusBlokus::Blokus::Move""'");
  }
  c_result = *(reinterpret_cast< HokusBlokus::Blokus::Move * >(swig_argp));
  if (SWIG_IsNewObj(swig_res)) delete reinterpret_cast< HokusBlokus::Blokus::Move * >(swig_argp);
  return (HokusBlokus::Blokus::Move) c_result;
}


void SwigDirector_Logic::OnGameEnd(int winningPlayerID) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_int(static_cast< int >(winningPlayerID));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Logic.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "OnGameEnd";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunctionObjArgs(method ,(PyObject *)obj0, NULL);
#else
  swig::SwigVar_PyObject swig_method_name = SWIG_Python_str_FromChar("OnGameEnd");
  swig::SwigVar_PyObject result = PyObject_CallMethodObjArgs(swig_get_self(), (PyObject *) swig_method_name ,(PyObject *)obj0, NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    if (error) {
      Swig::DirectorMethodException::raise("Error detected when calling 'Logic.OnGameEnd'");
    }
  }
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Logic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::AI::Logic *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  arg1 = swig_obj[0];
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (HokusBlokus::Blokus::AI::Logic *)new SwigDirector_Logic(arg1); 
  } else {
    result = (HokusBlokus::Blokus::AI::Logic *)new HokusBlokus::Blokus::AI::Logic(); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__AI__Logic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Logic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::AI::Logic *arg1 = (HokusBlokus::Blokus::AI::Logic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__AI__Logic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Logic" "', argument " "1"" of type '" "HokusBlokus::Blokus::AI::Logic *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::AI::Logic * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Logic_GetNextMove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::AI::Logic *arg1 = (HokusBlokus::Blokus::AI::Logic *) 0 ;
  HokusBlokus::Blokus::GameState arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  Swig::Director *director = 0;
  bool upcall = false;
  HokusBlokus::Blokus::Move result;
  
  if (!SWIG_Python_UnpackTuple(args, "Logic_GetNextMove", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__AI__Logic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Logic_GetNextMove" "', argument " "1"" of type '" "HokusBlokus::Blokus::AI::Logic *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::AI::Logic * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__GameState,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Logic_GetNextMove" "', argument " "2"" of type '" "HokusBlokus::Blokus::GameState""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Logic_GetNextMove" "', argument " "2"" of type '" "HokusBlokus::Blokus::GameState""'");
    } else {
      HokusBlokus::Blokus::GameState * temp = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Logic_GetNextMove" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      result = (arg1)->HokusBlokus::Blokus::AI::Logic::GetNextMove(arg2,arg3);
    } else {
      result = (arg1)->GetNextMove(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj((new HokusBlokus::Blokus::Move(static_cast< const HokusBlokus::Blokus::Move& >(result))), SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Logic_OnGameEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::AI::Logic *arg1 = (HokusBlokus::Blokus::AI::Logic *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!SWIG_Python_UnpackTuple(args, "Logic_OnGameEnd", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__AI__Logic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Logic_OnGameEnd" "', argument " "1"" of type '" "HokusBlokus::Blokus::AI::Logic *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::AI::Logic * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Logic_OnGameEnd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==swig_obj[0]));
  try {
    if (upcall) {
      (arg1)->HokusBlokus::Blokus::AI::Logic::OnGameEnd(arg2);
    } else {
      (arg1)->OnGameEnd(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_Logic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::AI::Logic *arg1 = (HokusBlokus::Blokus::AI::Logic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__AI__Logic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_Logic" "', argument " "1"" of type '" "HokusBlokus::Blokus::AI::Logic *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::AI::Logic * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Logic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__AI__Logic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Logic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_BenchmarkGPM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "BenchmarkGPM" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  HokusBlokus::Blokus::Benchmark::BenchmarkGPM(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BlokusClient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::AI::Logic *arg1 = (HokusBlokus::Blokus::AI::Logic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::Client::BlokusClient *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__AI__Logic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BlokusClient" "', argument " "1"" of type '" "HokusBlokus::Blokus::AI::Logic *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::AI::Logic * >(argp1);
  result = (HokusBlokus::Blokus::Client::BlokusClient *)new HokusBlokus::Blokus::Client::BlokusClient(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Client__BlokusClient, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BlokusClient_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Client::BlokusClient *arg1 = (HokusBlokus::Blokus::Client::BlokusClient *) 0 ;
  int arg2 ;
  char **arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char **argv2 = 0 ;
  size_t argc2 = 0 ;
  int owner2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BlokusClient_Start", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Client__BlokusClient, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BlokusClient_Start" "', argument " "1"" of type '" "HokusBlokus::Blokus::Client::BlokusClient *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Client::BlokusClient * >(argp1);
  res2 = SWIG_AsArgcArgv(swig_obj[1], SWIGTYPE_p_p_char, &argc2, &argv2, &owner2);
  if (!SWIG_IsOK(res2)) {
    arg2 = 0; arg3 = 0;
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BlokusClient_Start" "', argument " "2"" of type '" "int ARGC, char **ARGV""'");
  } else {
    arg2 = static_cast< int >(argc2);
    arg3 = static_cast< char ** >(argv2);
  }
  (arg1)->Start(arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (owner2) {
    size_t i = argc2;
    while (i) {
      delete[] argv2[--i];
    }
    delete[] argv2;
  }
  return resultobj;
fail:
  if (owner2) {
    size_t i = argc2;
    while (i) {
      delete[] argv2[--i];
    }
    delete[] argv2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BlokusClient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Client::BlokusClient *arg1 = (HokusBlokus::Blokus::Client::BlokusClient *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Client__BlokusClient, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BlokusClient" "', argument " "1"" of type '" "HokusBlokus::Blokus::Client::BlokusClient *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Client::BlokusClient * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BlokusClient_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Client__BlokusClient, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BlokusClient_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TCP_Client(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Client::TCP_Client *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TCP_Client", 0, 0, 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::Client::TCP_Client *)new HokusBlokus::Blokus::Client::TCP_Client();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Client__TCP_Client, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCP_Client_ConnectWithIP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Client::TCP_Client *arg1 = (HokusBlokus::Blokus::Client::TCP_Client *) 0 ;
  std::string arg2 ;
  unsigned short arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TCP_Client_ConnectWithIP", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Client__TCP_Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCP_Client_ConnectWithIP" "', argument " "1"" of type '" "HokusBlokus::Blokus::Client::TCP_Client *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Client::TCP_Client * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TCP_Client_ConnectWithIP" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_short(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TCP_Client_ConnectWithIP" "', argument " "3"" of type '" "unsigned short""'");
  } 
  arg3 = static_cast< unsigned short >(val3);
  (arg1)->ConnectWithIP(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCP_Client_Disconnect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Client::TCP_Client *arg1 = (HokusBlokus::Blokus::Client::TCP_Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Client__TCP_Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCP_Client_Disconnect" "', argument " "1"" of type '" "HokusBlokus::Blokus::Client::TCP_Client *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Client::TCP_Client * >(argp1);
  (arg1)->Disconnect();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCP_Client_ResolveHostnameToIPAddress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Client::TCP_Client *arg1 = (HokusBlokus::Blokus::Client::TCP_Client *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "TCP_Client_ResolveHostnameToIPAddress", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Client__TCP_Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCP_Client_ResolveHostnameToIPAddress" "', argument " "1"" of type '" "HokusBlokus::Blokus::Client::TCP_Client *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Client::TCP_Client * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TCP_Client_ResolveHostnameToIPAddress" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->ResolveHostnameToIPAddress(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCP_Client_SendMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Client::TCP_Client *arg1 = (HokusBlokus::Blokus::Client::TCP_Client *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "TCP_Client_SendMessage", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Client__TCP_Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCP_Client_SendMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Client::TCP_Client *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Client::TCP_Client * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TCP_Client_SendMessage" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  (arg1)->SendMessage(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TCP_Client_ReadMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Client::TCP_Client *arg1 = (HokusBlokus::Blokus::Client::TCP_Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Client__TCP_Client, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TCP_Client_ReadMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Client::TCP_Client *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Client::TCP_Client * >(argp1);
  result = (arg1)->ReadMessage();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TCP_Client(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Client::TCP_Client *arg1 = (HokusBlokus::Blokus::Client::TCP_Client *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Client__TCP_Client, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TCP_Client" "', argument " "1"" of type '" "HokusBlokus::Blokus::Client::TCP_Client *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Client::TCP_Client * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TCP_Client_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Client__TCP_Client, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TCP_Client_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SC_Message__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_Message *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::Communication::SC_Message *)new HokusBlokus::Blokus::Communication::SC_Message();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SC_Message__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  SC_MessageType *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  HokusBlokus::Blokus::Communication::SC_Message *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SC_Message" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SC_Message" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_SC_MessageType,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SC_Message" "', argument " "2"" of type '" "SC_MessageType const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SC_Message" "', argument " "2"" of type '" "SC_MessageType const &""'"); 
  }
  arg2 = reinterpret_cast< SC_MessageType * >(argp2);
  result = (HokusBlokus::Blokus::Communication::SC_Message *)new HokusBlokus::Blokus::Communication::SC_Message((std::string const &)*arg1,(SC_MessageType const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SC_Message(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SC_Message", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_SC_Message__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SC_MessageType, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SC_Message__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SC_Message'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HokusBlokus::Blokus::Communication::SC_Message::SC_Message()\n"
    "    HokusBlokus::Blokus::Communication::SC_Message::SC_Message(std::string const &,SC_MessageType const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SC_Message_GetContent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_Message *arg1 = (HokusBlokus::Blokus::Communication::SC_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_GetContent" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_Message const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_Message * >(argp1);
  result = ((HokusBlokus::Blokus::Communication::SC_Message const *)arg1)->GetContent();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_GetMessageType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_Message *arg1 = (HokusBlokus::Blokus::Communication::SC_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SC_MessageType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_GetMessageType" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_Message const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_Message * >(argp1);
  result = ((HokusBlokus::Blokus::Communication::SC_Message const *)arg1)->GetMessageType();
  resultobj = SWIG_NewPointerObj((new SC_MessageType(static_cast< const SC_MessageType& >(result))), SWIGTYPE_p_SC_MessageType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SC_Message(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_Message *arg1 = (HokusBlokus::Blokus::Communication::SC_Message *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SC_Message" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_Message *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_Message * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SC_Message_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SC_Message_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SC_MessageConverter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SC_MessageConverter", 0, 0, 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::Communication::SC_MessageConverter *)new HokusBlokus::Blokus::Communication::SC_MessageConverter();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_MessageConverter_SplitInputMessagesIntoValidSC_Messages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_MessageConverter_SplitInputMessagesIntoValidSC_Messages", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_MessageConverter_SplitInputMessagesIntoValidSC_Messages" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SC_MessageConverter_SplitInputMessagesIntoValidSC_Messages" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (arg1)->SplitInputMessagesIntoValidSC_Messages(arg2);
  resultobj = SWIG_NewPointerObj((new std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >(static_cast< const std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >& >(result))), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_MessageConverter_CreateProtocolMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::Communication::SC_Message result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_MessageConverter_CreateProtocolMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  result = (arg1)->CreateProtocolMessage();
  resultobj = SWIG_NewPointerObj((new HokusBlokus::Blokus::Communication::SC_Message(static_cast< const HokusBlokus::Blokus::Communication::SC_Message& >(result))), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_MessageConverter_CreateProtocolEndMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::Communication::SC_Message result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_MessageConverter_CreateProtocolEndMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  result = (arg1)->CreateProtocolEndMessage();
  resultobj = SWIG_NewPointerObj((new HokusBlokus::Blokus::Communication::SC_Message(static_cast< const HokusBlokus::Blokus::Communication::SC_Message& >(result))), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_MessageConverter_CreateJoinRequestMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::Communication::SC_Message result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_MessageConverter_CreateJoinRequestMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  result = (arg1)->CreateJoinRequestMessage();
  resultobj = SWIG_NewPointerObj((new HokusBlokus::Blokus::Communication::SC_Message(static_cast< const HokusBlokus::Blokus::Communication::SC_Message& >(result))), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_MessageConverter_CreateJoinReservedRequestMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  HokusBlokus::Blokus::Communication::SC_Message result;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_MessageConverter_CreateJoinReservedRequestMessage", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_MessageConverter_CreateJoinReservedRequestMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SC_MessageConverter_CreateJoinReservedRequestMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_MessageConverter_CreateJoinReservedRequestMessage" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->CreateJoinReservedRequestMessage((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj((new HokusBlokus::Blokus::Communication::SC_Message(static_cast< const HokusBlokus::Blokus::Communication::SC_Message& >(result))), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_MessageConverter_CreateMoveMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  HokusBlokus::Blokus::Move *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  HokusBlokus::Blokus::Communication::SC_Message result;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_MessageConverter_CreateMoveMessage", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_MessageConverter_CreateMoveMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SC_MessageConverter_CreateMoveMessage" "', argument " "2"" of type '" "HokusBlokus::Blokus::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_MessageConverter_CreateMoveMessage" "', argument " "2"" of type '" "HokusBlokus::Blokus::Move const &""'"); 
  }
  arg2 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SC_MessageConverter_CreateMoveMessage" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_MessageConverter_CreateMoveMessage" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->CreateMoveMessage((HokusBlokus::Blokus::Move const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj((new HokusBlokus::Blokus::Communication::SC_Message(static_cast< const HokusBlokus::Blokus::Communication::SC_Message& >(result))), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_MessageConverter_GetPlayerIDFromWelcomeMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  HokusBlokus::Blokus::Communication::SC_Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_MessageConverter_GetPlayerIDFromWelcomeMessage", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_MessageConverter_GetPlayerIDFromWelcomeMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SC_MessageConverter_GetPlayerIDFromWelcomeMessage" "', argument " "2"" of type '" "HokusBlokus::Blokus::Communication::SC_Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_MessageConverter_GetPlayerIDFromWelcomeMessage" "', argument " "2"" of type '" "HokusBlokus::Blokus::Communication::SC_Message const &""'"); 
  }
  arg2 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_Message * >(argp2);
  result = (int)(arg1)->GetPlayerIDFromWelcomeMessage((HokusBlokus::Blokus::Communication::SC_Message const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_MessageConverter_GetRoomIDFromJoinedMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  HokusBlokus::Blokus::Communication::SC_Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_MessageConverter_GetRoomIDFromJoinedMessage", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_MessageConverter_GetRoomIDFromJoinedMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SC_MessageConverter_GetRoomIDFromJoinedMessage" "', argument " "2"" of type '" "HokusBlokus::Blokus::Communication::SC_Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_MessageConverter_GetRoomIDFromJoinedMessage" "', argument " "2"" of type '" "HokusBlokus::Blokus::Communication::SC_Message const &""'"); 
  }
  arg2 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_Message * >(argp2);
  result = (arg1)->GetRoomIDFromJoinedMessage((HokusBlokus::Blokus::Communication::SC_Message const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_MessageConverter_GetGameStateFromGameStateMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  HokusBlokus::Blokus::Communication::SC_Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  HokusBlokus::Blokus::GameState result;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_MessageConverter_GetGameStateFromGameStateMessage", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_MessageConverter_GetGameStateFromGameStateMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SC_MessageConverter_GetGameStateFromGameStateMessage" "', argument " "2"" of type '" "HokusBlokus::Blokus::Communication::SC_Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_MessageConverter_GetGameStateFromGameStateMessage" "', argument " "2"" of type '" "HokusBlokus::Blokus::Communication::SC_Message const &""'"); 
  }
  arg2 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_Message * >(argp2);
  result = (arg1)->GetGameStateFromGameStateMessage((HokusBlokus::Blokus::Communication::SC_Message const &)*arg2);
  resultobj = SWIG_NewPointerObj((new HokusBlokus::Blokus::GameState(static_cast< const HokusBlokus::Blokus::GameState& >(result))), SWIGTYPE_p_HokusBlokus__Blokus__GameState, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_MessageConverter_GetIDOfWinningPlayerFromResultMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  HokusBlokus::Blokus::Communication::SC_Message *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_MessageConverter_GetIDOfWinningPlayerFromResultMessage", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_MessageConverter_GetIDOfWinningPlayerFromResultMessage" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SC_MessageConverter_GetIDOfWinningPlayerFromResultMessage" "', argument " "2"" of type '" "HokusBlokus::Blokus::Communication::SC_Message const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_MessageConverter_GetIDOfWinningPlayerFromResultMessage" "', argument " "2"" of type '" "HokusBlokus::Blokus::Communication::SC_Message const &""'"); 
  }
  arg2 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_Message * >(argp2);
  result = (int)(arg1)->GetIDOfWinningPlayerFromResultMessage((HokusBlokus::Blokus::Communication::SC_Message const &)*arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SC_MessageConverter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Communication::SC_MessageConverter *arg1 = (HokusBlokus::Blokus::Communication::SC_MessageConverter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SC_MessageConverter" "', argument " "1"" of type '" "HokusBlokus::Blokus::Communication::SC_MessageConverter *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Communication::SC_MessageConverter * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SC_MessageConverter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_MessageConverter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SC_MessageConverter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BoundingRect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Optimization::BoundingRect *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::Optimization::BoundingRect *)new HokusBlokus::Blokus::Optimization::BoundingRect();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoundingRect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Vec2i *arg1 = 0 ;
  Vec2i *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  HokusBlokus::Blokus::Optimization::BoundingRect *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BoundingRect" "', argument " "1"" of type '" "Vec2i const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BoundingRect" "', argument " "1"" of type '" "Vec2i const &""'"); 
  }
  arg1 = reinterpret_cast< Vec2i * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BoundingRect" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BoundingRect" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  result = (HokusBlokus::Blokus::Optimization::BoundingRect *)new HokusBlokus::Blokus::Optimization::BoundingRect((Vec2i const &)*arg1,(Vec2i const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRect, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoundingRect(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_BoundingRect", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_BoundingRect__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec2i, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Vec2i, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BoundingRect__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_BoundingRect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HokusBlokus::Blokus::Optimization::BoundingRect::BoundingRect()\n"
    "    HokusBlokus::Blokus::Optimization::BoundingRect::BoundingRect(Vec2i const &,Vec2i const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BoundingRect_GetMinBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Optimization::BoundingRect *arg1 = (HokusBlokus::Blokus::Optimization::BoundingRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Vec2i *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundingRect_GetMinBounds" "', argument " "1"" of type '" "HokusBlokus::Blokus::Optimization::BoundingRect *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Optimization::BoundingRect * >(argp1);
  result = (Vec2i *) &(arg1)->GetMinBounds();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundingRect_SetMinBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Optimization::BoundingRect *arg1 = (HokusBlokus::Blokus::Optimization::BoundingRect *) 0 ;
  Vec2i *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BoundingRect_SetMinBounds", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundingRect_SetMinBounds" "', argument " "1"" of type '" "HokusBlokus::Blokus::Optimization::BoundingRect *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Optimization::BoundingRect * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BoundingRect_SetMinBounds" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BoundingRect_SetMinBounds" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  (arg1)->SetMinBounds((Vec2i const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundingRect_GetMaxBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Optimization::BoundingRect *arg1 = (HokusBlokus::Blokus::Optimization::BoundingRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Vec2i *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundingRect_GetMaxBounds" "', argument " "1"" of type '" "HokusBlokus::Blokus::Optimization::BoundingRect *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Optimization::BoundingRect * >(argp1);
  result = (Vec2i *) &(arg1)->GetMaxBounds();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundingRect_SetMaxBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Optimization::BoundingRect *arg1 = (HokusBlokus::Blokus::Optimization::BoundingRect *) 0 ;
  Vec2i *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BoundingRect_SetMaxBounds", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRect, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundingRect_SetMaxBounds" "', argument " "1"" of type '" "HokusBlokus::Blokus::Optimization::BoundingRect *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Optimization::BoundingRect * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Vec2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BoundingRect_SetMaxBounds" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BoundingRect_SetMaxBounds" "', argument " "2"" of type '" "Vec2i const &""'"); 
  }
  arg2 = reinterpret_cast< Vec2i * >(argp2);
  (arg1)->SetMaxBounds((Vec2i const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BoundingRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Optimization::BoundingRect *arg1 = (HokusBlokus::Blokus::Optimization::BoundingRect *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRect, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BoundingRect" "', argument " "1"" of type '" "HokusBlokus::Blokus::Optimization::BoundingRect *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Optimization::BoundingRect * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BoundingRect_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRect, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BoundingRect_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_BoundingRectOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_BoundingRectOptimizer", 0, 0, 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *)new HokusBlokus::Blokus::Optimization::BoundingRectOptimizer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundingRectOptimizer_GetBoundingRect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *arg1 = (HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *) 0 ;
  Color arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  HokusBlokus::Blokus::Optimization::BoundingRect *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "BoundingRectOptimizer_GetBoundingRect", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundingRectOptimizer_GetBoundingRect" "', argument " "1"" of type '" "HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Optimization::BoundingRectOptimizer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Color,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BoundingRectOptimizer_GetBoundingRect" "', argument " "2"" of type '" "Color""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BoundingRectOptimizer_GetBoundingRect" "', argument " "2"" of type '" "Color""'");
    } else {
      Color * temp = reinterpret_cast< Color * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (HokusBlokus::Blokus::Optimization::BoundingRect *) &(arg1)->GetBoundingRect(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRect, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundingRectOptimizer_OptimizeBoundingRectOfColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *arg1 = (HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *) 0 ;
  Color arg2 ;
  Board arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BoundingRectOptimizer_OptimizeBoundingRectOfColor", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundingRectOptimizer_OptimizeBoundingRectOfColor" "', argument " "1"" of type '" "HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Optimization::BoundingRectOptimizer * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Color,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BoundingRectOptimizer_OptimizeBoundingRectOfColor" "', argument " "2"" of type '" "Color""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BoundingRectOptimizer_OptimizeBoundingRectOfColor" "', argument " "2"" of type '" "Color""'");
    } else {
      Color * temp = reinterpret_cast< Color * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_Board,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BoundingRectOptimizer_OptimizeBoundingRectOfColor" "', argument " "3"" of type '" "Board""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BoundingRectOptimizer_OptimizeBoundingRectOfColor" "', argument " "3"" of type '" "Board""'");
    } else {
      Board * temp = reinterpret_cast< Board * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->OptimizeBoundingRectOfColor(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BoundingRectOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *arg1 = (HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BoundingRectOptimizer" "', argument " "1"" of type '" "HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Optimization::BoundingRectOptimizer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BoundingRectOptimizer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BoundingRectOptimizer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Board(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Board *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Board", 0, 0, 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::Board *)new HokusBlokus::Blokus::Board();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Board, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_InitStartingBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Board *arg1 = (HokusBlokus::Blokus::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_InitStartingBoard" "', argument " "1"" of type '" "HokusBlokus::Blokus::Board *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Board * >(argp1);
  (arg1)->InitStartingBoard();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_GetBitmask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Board *arg1 = (HokusBlokus::Blokus::Board *) 0 ;
  Color arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  std::bitset< 484 > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Board_GetBitmask", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_GetBitmask" "', argument " "1"" of type '" "HokusBlokus::Blokus::Board *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Board * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Color,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_GetBitmask" "', argument " "2"" of type '" "Color""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_GetBitmask" "', argument " "2"" of type '" "Color""'");
    } else {
      Color * temp = reinterpret_cast< Color * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::bitset< 484 > *) &(arg1)->GetBitmask(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__bitsetT_484_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_SetBitmask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Board *arg1 = (HokusBlokus::Blokus::Board *) 0 ;
  Color arg2 ;
  std::bitset< 484 > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Board_SetBitmask", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_SetBitmask" "', argument " "1"" of type '" "HokusBlokus::Blokus::Board *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Board * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Color,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Board_SetBitmask" "', argument " "2"" of type '" "Color""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_SetBitmask" "', argument " "2"" of type '" "Color""'");
    } else {
      Color * temp = reinterpret_cast< Color * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__bitsetT_484_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Board_SetBitmask" "', argument " "3"" of type '" "std::bitset< 484 >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Board_SetBitmask" "', argument " "3"" of type '" "std::bitset< 484 >""'");
    } else {
      std::bitset< 484 > * temp = reinterpret_cast< std::bitset< 484 > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  (arg1)->SetBitmask(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Board_Draw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Board *arg1 = (HokusBlokus::Blokus::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Board, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Board_Draw" "', argument " "1"" of type '" "HokusBlokus::Blokus::Board *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Board * >(argp1);
  result = (arg1)->Draw();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Board(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Board *arg1 = (HokusBlokus::Blokus::Board *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Board, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Board" "', argument " "1"" of type '" "HokusBlokus::Blokus::Board *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Board * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Board_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Board, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Board_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ColorToInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Color arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ColorToInt" "', argument " "1"" of type '" "HokusBlokus::Blokus::Color""'");
  } 
  arg1 = static_cast< HokusBlokus::Blokus::Color >(val1);
  result = (int)HokusBlokus::Blokus::ColorToInt(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ColorToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Color arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ColorToString" "', argument " "1"" of type '" "HokusBlokus::Blokus::Color""'");
  } 
  arg1 = static_cast< HokusBlokus::Blokus::Color >(val1);
  result = HokusBlokus::Blokus::ColorToString(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntToColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::Color result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IntToColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (HokusBlokus::Blokus::Color)HokusBlokus::Blokus::IntToColor(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GameState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_GameState", 0, 0, 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::GameState *)new HokusBlokus::Blokus::GameState();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__GameState, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_InitStartingGameState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_InitStartingGameState" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  (arg1)->InitStartingGameState();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_GetBoard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::Board *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_GetBoard" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  result = (HokusBlokus::Blokus::Board *) &(arg1)->GetBoard();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Board, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_GetCurrentColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::Color result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_GetCurrentColor" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  result = (HokusBlokus::Blokus::Color)((HokusBlokus::Blokus::GameState const *)arg1)->GetCurrentColor();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_GetCurrentPlayer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Player *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_GetCurrentPlayer" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  result = (Player *) &(arg1)->GetCurrentPlayer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_GetPlayerWithColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  HokusBlokus::Blokus::Color arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  Player *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "GameState_GetPlayerWithColor", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_GetPlayerWithColor" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameState_GetPlayerWithColor" "', argument " "2"" of type '" "HokusBlokus::Blokus::Color""'");
  } 
  arg2 = static_cast< HokusBlokus::Blokus::Color >(val2);
  result = (Player *) &(arg1)->GetPlayerWithColor(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Player, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_GetPerformedMoves(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< Move,std::allocator< HokusBlokus::Blokus::Move > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_GetPerformedMoves" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  result = (std::vector< Move,std::allocator< HokusBlokus::Blokus::Move > > *) &(arg1)->GetPerformedMoves();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_GetLastPerfromedMove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Move *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_GetLastPerfromedMove" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  result = (Move *) &(arg1)->GetLastPerfromedMove();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Move, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_SetLastPerformedMove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  Move arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GameState_SetLastPerformedMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_SetLastPerformedMove" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Move,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameState_SetLastPerformedMove" "', argument " "2"" of type '" "Move""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameState_SetLastPerformedMove" "', argument " "2"" of type '" "Move""'");
    } else {
      Move * temp = reinterpret_cast< Move * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SetLastPerformedMove(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_GetTurn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_GetTurn" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  result = (int)((HokusBlokus::Blokus::GameState const *)arg1)->GetTurn();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_SetTurn(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GameState_SetTurn", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_SetTurn" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GameState_SetTurn" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  (arg1)->SetTurn(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_GetStartingPieceShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PieceShape result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_GetStartingPieceShape" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  result = ((HokusBlokus::Blokus::GameState const *)arg1)->GetStartingPieceShape();
  resultobj = SWIG_NewPointerObj((new PieceShape(static_cast< const PieceShape& >(result))), SWIGTYPE_p_PieceShape, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_SetStartingPieceShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  PieceShape arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GameState_SetStartingPieceShape", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_SetStartingPieceShape" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_PieceShape,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameState_SetStartingPieceShape" "', argument " "2"" of type '" "PieceShape""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameState_SetStartingPieceShape" "', argument " "2"" of type '" "PieceShape""'");
    } else {
      PieceShape * temp = reinterpret_cast< PieceShape * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SetStartingPieceShape(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_GetPossibleMoves(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::vector< Move,std::allocator< HokusBlokus::Blokus::Move > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_GetPossibleMoves" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  result = (arg1)->GetPossibleMoves();
  resultobj = SWIG_NewPointerObj((new std::vector< Move,std::allocator< HokusBlokus::Blokus::Move > >(static_cast< const std::vector< Move,std::allocator< HokusBlokus::Blokus::Move > >& >(result))), SWIGTYPE_p_std__vectorT_Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_PerformMove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GameState_PerformMove", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_PerformMove" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GameState_PerformMove" "', argument " "2"" of type '" "Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GameState_PerformMove" "', argument " "2"" of type '" "Move const &""'"); 
  }
  arg2 = reinterpret_cast< Move * >(argp2);
  (arg1)->PerformMove((Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_UndoLastMove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_UndoLastMove" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  (arg1)->UndoLastMove();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_IsGameOver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_IsGameOver" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  result = (bool)((HokusBlokus::Blokus::GameState const *)arg1)->IsGameOver();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GameState_Draw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GameState_Draw" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  result = (arg1)->Draw();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GameState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::GameState *arg1 = (HokusBlokus::Blokus::GameState *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__GameState, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GameState" "', argument " "1"" of type '" "HokusBlokus::Blokus::GameState *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::GameState * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GameState_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__GameState, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GameState_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_MaskTypeToInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::MaskType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MaskTypeToInt" "', argument " "1"" of type '" "HokusBlokus::Blokus::MaskType""'");
  } 
  arg1 = static_cast< HokusBlokus::Blokus::MaskType >(val1);
  result = (int)HokusBlokus::Blokus::MaskTypeToInt(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntToMaskType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::MaskType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IntToMaskType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (HokusBlokus::Blokus::MaskType)HokusBlokus::Blokus::IntToMaskType(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Move__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Move *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::Move *)new HokusBlokus::Blokus::Move();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Move__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  Vec2i arg1 ;
  PieceShape arg2 ;
  HokusBlokus::Blokus::Color arg3 ;
  MoveType arg4 ;
  int arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  HokusBlokus::Blokus::Move *result = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_Vec2i,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Move" "', argument " "1"" of type '" "Vec2i""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Move" "', argument " "1"" of type '" "Vec2i""'");
    } else {
      Vec2i * temp = reinterpret_cast< Vec2i * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_PieceShape,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Move" "', argument " "2"" of type '" "PieceShape""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Move" "', argument " "2"" of type '" "PieceShape""'");
    } else {
      PieceShape * temp = reinterpret_cast< PieceShape * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Move" "', argument " "3"" of type '" "HokusBlokus::Blokus::Color""'");
  } 
  arg3 = static_cast< HokusBlokus::Blokus::Color >(val3);
  {
    res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_MoveType,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Move" "', argument " "4"" of type '" "MoveType""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Move" "', argument " "4"" of type '" "MoveType""'");
    } else {
      MoveType * temp = reinterpret_cast< MoveType * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  ecode5 = SWIG_AsVal_int(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Move" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = (HokusBlokus::Blokus::Move *)new HokusBlokus::Blokus::Move(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Move(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Move", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Move__SWIG_0(self, argc, argv);
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Vec2i, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_PieceShape, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_MoveType, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new_Move__SWIG_1(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Move'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HokusBlokus::Blokus::Move::Move()\n"
    "    HokusBlokus::Blokus::Move::Move(Vec2i,PieceShape,HokusBlokus::Blokus::Color,MoveType,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Move___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Move *arg1 = (HokusBlokus::Blokus::Move *) 0 ;
  HokusBlokus::Blokus::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "Move___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move___eq__" "', argument " "1"" of type '" "HokusBlokus::Blokus::Move *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Move___eq__" "', argument " "2"" of type '" "HokusBlokus::Blokus::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move___eq__" "', argument " "2"" of type '" "HokusBlokus::Blokus::Move const &""'"); 
  }
  arg2 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp2);
  result = (bool)(arg1)->operator ==((HokusBlokus::Blokus::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Move___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Move *arg1 = (HokusBlokus::Blokus::Move *) 0 ;
  HokusBlokus::Blokus::Move *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "Move___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move___ne__" "', argument " "1"" of type '" "HokusBlokus::Blokus::Move *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Move___ne__" "', argument " "2"" of type '" "HokusBlokus::Blokus::Move const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move___ne__" "', argument " "2"" of type '" "HokusBlokus::Blokus::Move const &""'"); 
  }
  arg2 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp2);
  result = (bool)(arg1)->operator !=((HokusBlokus::Blokus::Move const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Move_GetDestination(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Move *arg1 = (HokusBlokus::Blokus::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Vec2i *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_GetDestination" "', argument " "1"" of type '" "HokusBlokus::Blokus::Move const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp1);
  result = (Vec2i *) &((HokusBlokus::Blokus::Move const *)arg1)->GetDestination();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_GetPieceShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Move *arg1 = (HokusBlokus::Blokus::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PieceShape result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_GetPieceShape" "', argument " "1"" of type '" "HokusBlokus::Blokus::Move const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp1);
  result = ((HokusBlokus::Blokus::Move const *)arg1)->GetPieceShape();
  resultobj = SWIG_NewPointerObj((new PieceShape(static_cast< const PieceShape& >(result))), SWIGTYPE_p_PieceShape, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_GetColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Move *arg1 = (HokusBlokus::Blokus::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::Color result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_GetColor" "', argument " "1"" of type '" "HokusBlokus::Blokus::Move const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp1);
  result = (HokusBlokus::Blokus::Color)((HokusBlokus::Blokus::Move const *)arg1)->GetColor();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_GetMoveType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Move *arg1 = (HokusBlokus::Blokus::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  MoveType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_GetMoveType" "', argument " "1"" of type '" "HokusBlokus::Blokus::Move const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp1);
  result = ((HokusBlokus::Blokus::Move const *)arg1)->GetMoveType();
  resultobj = SWIG_NewPointerObj((new MoveType(static_cast< const MoveType& >(result))), SWIGTYPE_p_MoveType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_GetComplementNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Move *arg1 = (HokusBlokus::Blokus::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Move, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_GetComplementNumber" "', argument " "1"" of type '" "HokusBlokus::Blokus::Move const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp1);
  result = (int)((HokusBlokus::Blokus::Move const *)arg1)->GetComplementNumber();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Move *arg1 = (HokusBlokus::Blokus::Move *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Move" "', argument " "1"" of type '" "HokusBlokus::Blokus::Move *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Move * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Move_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Move_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Piece(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::Piece *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Piece" "', argument " "1"" of type '" "std::vector< PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Piece" "', argument " "1"" of type '" "std::vector< PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >""'");
    } else {
      std::vector< PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > * temp = reinterpret_cast< std::vector< PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (HokusBlokus::Blokus::Piece *)new HokusBlokus::Blokus::Piece(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Piece, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Piece_GetPieceBitmaskComplements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Piece *arg1 = (HokusBlokus::Blokus::Piece *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Piece, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Piece_GetPieceBitmaskComplements" "', argument " "1"" of type '" "HokusBlokus::Blokus::Piece const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Piece * >(argp1);
  result = (std::vector< PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *) &((HokusBlokus::Blokus::Piece const *)arg1)->GetPieceBitmaskComplements();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Piece(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Piece *arg1 = (HokusBlokus::Blokus::Piece *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Piece, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Piece" "', argument " "1"" of type '" "HokusBlokus::Blokus::Piece *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Piece * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Piece_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Piece, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Piece_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PieceBitmask__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmask *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::PieceBitmask *)new HokusBlokus::Blokus::PieceBitmask();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PieceBitmask__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::bitset< 484 > arg1 ;
  HokusBlokus::Blokus::MaskType arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  HokusBlokus::Blokus::PieceBitmask *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__bitsetT_484_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PieceBitmask" "', argument " "1"" of type '" "std::bitset< 484 >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PieceBitmask" "', argument " "1"" of type '" "std::bitset< 484 >""'");
    } else {
      std::bitset< 484 > * temp = reinterpret_cast< std::bitset< 484 > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PieceBitmask" "', argument " "2"" of type '" "HokusBlokus::Blokus::MaskType""'");
  } 
  arg2 = static_cast< HokusBlokus::Blokus::MaskType >(val2);
  result = (HokusBlokus::Blokus::PieceBitmask *)new HokusBlokus::Blokus::PieceBitmask(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PieceBitmask(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PieceBitmask", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PieceBitmask__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__bitsetT_484_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_PieceBitmask__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PieceBitmask'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HokusBlokus::Blokus::PieceBitmask::PieceBitmask()\n"
    "    HokusBlokus::Blokus::PieceBitmask::PieceBitmask(std::bitset< 484 >,HokusBlokus::Blokus::MaskType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PieceBitmask___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmask *arg1 = (HokusBlokus::Blokus::PieceBitmask *) 0 ;
  HokusBlokus::Blokus::PieceBitmask *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "PieceBitmask___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceBitmask___eq__" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmask const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmask * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PieceBitmask___eq__" "', argument " "2"" of type '" "HokusBlokus::Blokus::PieceBitmask const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PieceBitmask___eq__" "', argument " "2"" of type '" "HokusBlokus::Blokus::PieceBitmask const &""'"); 
  }
  arg2 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmask * >(argp2);
  result = (bool)((HokusBlokus::Blokus::PieceBitmask const *)arg1)->operator ==((HokusBlokus::Blokus::PieceBitmask const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PieceBitmask_GetBitmask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmask *arg1 = (HokusBlokus::Blokus::PieceBitmask *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::bitset< 484 > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceBitmask_GetBitmask" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmask const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmask * >(argp1);
  result = (std::bitset< 484 > *) &((HokusBlokus::Blokus::PieceBitmask const *)arg1)->GetBitmask();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__bitsetT_484_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PieceBitmask_GetMaskDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmask *arg1 = (HokusBlokus::Blokus::PieceBitmask *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  Vec2i *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceBitmask_GetMaskDimensions" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmask const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmask * >(argp1);
  result = (Vec2i *) &((HokusBlokus::Blokus::PieceBitmask const *)arg1)->GetMaskDimensions();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Vec2i, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PieceBitmask_GetMaskType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmask *arg1 = (HokusBlokus::Blokus::PieceBitmask *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::MaskType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceBitmask_GetMaskType" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmask const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmask * >(argp1);
  result = (HokusBlokus::Blokus::MaskType)((HokusBlokus::Blokus::PieceBitmask const *)arg1)->GetMaskType();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PieceBitmask_Draw(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmask *arg1 = (HokusBlokus::Blokus::PieceBitmask *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceBitmask_Draw" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmask const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmask * >(argp1);
  result = ((HokusBlokus::Blokus::PieceBitmask const *)arg1)->Draw();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PieceBitmask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmask *arg1 = (HokusBlokus::Blokus::PieceBitmask *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PieceBitmask" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmask *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmask * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PieceBitmask_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PieceBitmask_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_PieceBitmaskComplement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmaskComplement *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::PieceBitmaskComplement *)new HokusBlokus::Blokus::PieceBitmaskComplement();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PieceBitmaskComplement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::array< HokusBlokus::Blokus::PieceBitmask,3 > > arg1 ;
  PieceRotation arg2 ;
  bool arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  HokusBlokus::Blokus::PieceBitmaskComplement *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__arrayT_HokusBlokus__Blokus__PieceBitmask_3_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PieceBitmaskComplement" "', argument " "1"" of type '" "std::array< HokusBlokus::Blokus::PieceBitmask,3 >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PieceBitmaskComplement" "', argument " "1"" of type '" "std::array< HokusBlokus::Blokus::PieceBitmask,3 >""'");
    } else {
      std::array< HokusBlokus::Blokus::PieceBitmask,3 > * temp = reinterpret_cast< std::array< HokusBlokus::Blokus::PieceBitmask,3 > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_PieceRotation,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PieceBitmaskComplement" "', argument " "2"" of type '" "PieceRotation""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PieceBitmaskComplement" "', argument " "2"" of type '" "PieceRotation""'");
    } else {
      PieceRotation * temp = reinterpret_cast< PieceRotation * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PieceBitmaskComplement" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (HokusBlokus::Blokus::PieceBitmaskComplement *)new HokusBlokus::Blokus::PieceBitmaskComplement(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PieceBitmaskComplement(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PieceBitmaskComplement", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PieceBitmaskComplement__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__arrayT_HokusBlokus__Blokus__PieceBitmask_3_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_PieceRotation, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_PieceBitmaskComplement__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PieceBitmaskComplement'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HokusBlokus::Blokus::PieceBitmaskComplement::PieceBitmaskComplement()\n"
    "    HokusBlokus::Blokus::PieceBitmaskComplement::PieceBitmaskComplement(std::array< HokusBlokus::Blokus::PieceBitmask,3 >,PieceRotation,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PieceBitmaskComplement___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmaskComplement *arg1 = (HokusBlokus::Blokus::PieceBitmaskComplement *) 0 ;
  HokusBlokus::Blokus::PieceBitmaskComplement *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "PieceBitmaskComplement___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceBitmaskComplement___eq__" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmaskComplement *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmaskComplement * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PieceBitmaskComplement___eq__" "', argument " "2"" of type '" "HokusBlokus::Blokus::PieceBitmaskComplement const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PieceBitmaskComplement___eq__" "', argument " "2"" of type '" "HokusBlokus::Blokus::PieceBitmaskComplement const &""'"); 
  }
  arg2 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmaskComplement * >(argp2);
  result = (bool)(arg1)->operator ==((HokusBlokus::Blokus::PieceBitmaskComplement const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_PieceBitmaskComplement_GetBitmask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmaskComplement *arg1 = (HokusBlokus::Blokus::PieceBitmaskComplement *) 0 ;
  HokusBlokus::Blokus::MaskType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  HokusBlokus::Blokus::PieceBitmask *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "PieceBitmaskComplement_GetBitmask", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceBitmaskComplement_GetBitmask" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmaskComplement const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmaskComplement * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PieceBitmaskComplement_GetBitmask" "', argument " "2"" of type '" "HokusBlokus::Blokus::MaskType""'");
  } 
  arg2 = static_cast< HokusBlokus::Blokus::MaskType >(val2);
  result = (HokusBlokus::Blokus::PieceBitmask *) &((HokusBlokus::Blokus::PieceBitmaskComplement const *)arg1)->GetBitmask(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmask, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PieceBitmaskComplement_GetRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmaskComplement *arg1 = (HokusBlokus::Blokus::PieceBitmaskComplement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PieceRotation result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceBitmaskComplement_GetRotation" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmaskComplement const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmaskComplement * >(argp1);
  result = ((HokusBlokus::Blokus::PieceBitmaskComplement const *)arg1)->GetRotation();
  resultobj = SWIG_NewPointerObj((new PieceRotation(static_cast< const PieceRotation& >(result))), SWIGTYPE_p_PieceRotation, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PieceBitmaskComplement_IsFlipped(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmaskComplement *arg1 = (HokusBlokus::Blokus::PieceBitmaskComplement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceBitmaskComplement_IsFlipped" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmaskComplement const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmaskComplement * >(argp1);
  result = (bool)((HokusBlokus::Blokus::PieceBitmaskComplement const *)arg1)->IsFlipped();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PieceBitmaskComplement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceBitmaskComplement *arg1 = (HokusBlokus::Blokus::PieceBitmaskComplement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PieceBitmaskComplement" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceBitmaskComplement *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceBitmaskComplement * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PieceBitmaskComplement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PieceBitmaskComplement_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_PieceManager_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceManager_Init" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PieceManager_Init" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  HokusBlokus::Blokus::PieceManager::Init((std::string const &)*arg1);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PieceManager_GetPiece(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PieceShape arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::Piece *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_PieceShape,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PieceManager_GetPiece" "', argument " "1"" of type '" "PieceShape""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PieceManager_GetPiece" "', argument " "1"" of type '" "PieceShape""'");
    } else {
      PieceShape * temp = reinterpret_cast< PieceShape * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  result = (HokusBlokus::Blokus::Piece *) &HokusBlokus::Blokus::PieceManager::GetPiece(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Piece, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PieceManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceManager *arg1 = (HokusBlokus::Blokus::PieceManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__PieceManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PieceManager" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceManager *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::PieceManager * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PieceManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__PieceManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StringToPieceRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::PieceRotation result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringToPieceRotation" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (HokusBlokus::Blokus::PieceRotation)HokusBlokus::Blokus::StringToPieceRotation(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PieceRotationToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceRotation arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PieceRotationToString" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceRotation""'");
  } 
  arg1 = static_cast< HokusBlokus::Blokus::PieceRotation >(val1);
  result = HokusBlokus::Blokus::PieceRotationToString(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PieceShapeToInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceShape arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PieceShapeToInt" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceShape""'");
  } 
  arg1 = static_cast< HokusBlokus::Blokus::PieceShape >(val1);
  result = (int)HokusBlokus::Blokus::PieceShapeToInt(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PieceShapeToString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::PieceShape arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PieceShapeToString" "', argument " "1"" of type '" "HokusBlokus::Blokus::PieceShape""'");
  } 
  arg1 = static_cast< HokusBlokus::Blokus::PieceShape >(val1);
  result = HokusBlokus::Blokus::PieceShapeToString(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntToPieceShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::PieceShape result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IntToPieceShape" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (HokusBlokus::Blokus::PieceShape)HokusBlokus::Blokus::IntToPieceShape(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringToPieceShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  PyObject *swig_obj[1] ;
  HokusBlokus::Blokus::PieceShape result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringToPieceShape" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (HokusBlokus::Blokus::PieceShape)HokusBlokus::Blokus::StringToPieceShape(arg1);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Player(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Color arg1 ;
  HokusBlokus::Blokus::Color arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  HokusBlokus::Blokus::Player *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Player", 2, 2, swig_obj)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Player" "', argument " "1"" of type '" "HokusBlokus::Blokus::Color""'");
  } 
  arg1 = static_cast< HokusBlokus::Blokus::Color >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Player" "', argument " "2"" of type '" "HokusBlokus::Blokus::Color""'");
  } 
  arg2 = static_cast< HokusBlokus::Blokus::Color >(val2);
  result = (HokusBlokus::Blokus::Player *)new HokusBlokus::Blokus::Player(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Player, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_PopulateUndeployedPieces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Player *arg1 = (HokusBlokus::Blokus::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_PopulateUndeployedPieces" "', argument " "1"" of type '" "HokusBlokus::Blokus::Player *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Player * >(argp1);
  (arg1)->PopulateUndeployedPieces();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_GetColors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Player *arg1 = (HokusBlokus::Blokus::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::array< enum HokusBlokus::Blokus::Color,2 > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_GetColors" "', argument " "1"" of type '" "HokusBlokus::Blokus::Player *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Player * >(argp1);
  result = (arg1)->GetColors();
  resultobj = SWIG_NewPointerObj((new std::array< HokusBlokus::Blokus::Color,2 >(static_cast< const std::array< HokusBlokus::Blokus::Color,2 >& >(result))), SWIGTYPE_p_std__arrayT_HokusBlokus__Blokus__Color_2_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_GetUndeployedPieceShapeIDs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Player *arg1 = (HokusBlokus::Blokus::Player *) 0 ;
  HokusBlokus::Blokus::Color arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Player_GetUndeployedPieceShapeIDs", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_GetUndeployedPieceShapeIDs" "', argument " "1"" of type '" "HokusBlokus::Blokus::Player const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Player * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Player_GetUndeployedPieceShapeIDs" "', argument " "2"" of type '" "HokusBlokus::Blokus::Color""'");
  } 
  arg2 = static_cast< HokusBlokus::Blokus::Color >(val2);
  result = (std::vector< int,std::allocator< int > > *) &((HokusBlokus::Blokus::Player const *)arg1)->GetUndeployedPieceShapeIDs(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_AddUndeployedPieceShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Player *arg1 = (HokusBlokus::Blokus::Player *) 0 ;
  HokusBlokus::Blokus::Color arg2 ;
  HokusBlokus::Blokus::PieceShape arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Player_AddUndeployedPieceShape", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_AddUndeployedPieceShape" "', argument " "1"" of type '" "HokusBlokus::Blokus::Player *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Player * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Player_AddUndeployedPieceShape" "', argument " "2"" of type '" "HokusBlokus::Blokus::Color""'");
  } 
  arg2 = static_cast< HokusBlokus::Blokus::Color >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Player_AddUndeployedPieceShape" "', argument " "3"" of type '" "HokusBlokus::Blokus::PieceShape""'");
  } 
  arg3 = static_cast< HokusBlokus::Blokus::PieceShape >(val3);
  (arg1)->AddUndeployedPieceShape(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Player_RemoveUndeployedPieceShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Player *arg1 = (HokusBlokus::Blokus::Player *) 0 ;
  HokusBlokus::Blokus::Color arg2 ;
  HokusBlokus::Blokus::PieceShape arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Player_RemoveUndeployedPieceShape", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Player, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Player_RemoveUndeployedPieceShape" "', argument " "1"" of type '" "HokusBlokus::Blokus::Player *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Player * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Player_RemoveUndeployedPieceShape" "', argument " "2"" of type '" "HokusBlokus::Blokus::Color""'");
  } 
  arg2 = static_cast< HokusBlokus::Blokus::Color >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Player_RemoveUndeployedPieceShape" "', argument " "3"" of type '" "HokusBlokus::Blokus::PieceShape""'");
  } 
  arg3 = static_cast< HokusBlokus::Blokus::PieceShape >(val3);
  (arg1)->RemoveUndeployedPieceShape(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Player(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Player *arg1 = (HokusBlokus::Blokus::Player *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Player, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Player" "', argument " "1"" of type '" "HokusBlokus::Blokus::Player *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Player * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Player_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Player, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Player_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Vec2i_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Vec2i *arg1 = (HokusBlokus::Blokus::Vec2i *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Vec2i_x_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_x_set" "', argument " "1"" of type '" "HokusBlokus::Blokus::Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Vec2i * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2i_x_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->x = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Vec2i *arg1 = (HokusBlokus::Blokus::Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_x_get" "', argument " "1"" of type '" "HokusBlokus::Blokus::Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Vec2i * >(argp1);
  result = (int) ((arg1)->x);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Vec2i *arg1 = (HokusBlokus::Blokus::Vec2i *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Vec2i_y_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_y_set" "', argument " "1"" of type '" "HokusBlokus::Blokus::Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Vec2i * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Vec2i_y_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->y = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Vec2i_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Vec2i *arg1 = (HokusBlokus::Blokus::Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i_y_get" "', argument " "1"" of type '" "HokusBlokus::Blokus::Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Vec2i * >(argp1);
  result = (int) ((arg1)->y);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2i__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Vec2i *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (HokusBlokus::Blokus::Vec2i *)new HokusBlokus::Blokus::Vec2i();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Vec2i, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2i__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  HokusBlokus::Blokus::Vec2i *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Vec2i" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Vec2i" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (HokusBlokus::Blokus::Vec2i *)new HokusBlokus::Blokus::Vec2i(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Vec2i, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Vec2i(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Vec2i", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Vec2i__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Vec2i__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Vec2i'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HokusBlokus::Blokus::Vec2i::Vec2i()\n"
    "    HokusBlokus::Blokus::Vec2i::Vec2i(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Vec2i___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Vec2i *arg1 = (HokusBlokus::Blokus::Vec2i *) 0 ;
  HokusBlokus::Blokus::Vec2i *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "Vec2i___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Vec2i, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Vec2i___eq__" "', argument " "1"" of type '" "HokusBlokus::Blokus::Vec2i const *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Vec2i * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Vec2i,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Vec2i___eq__" "', argument " "2"" of type '" "HokusBlokus::Blokus::Vec2i const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Vec2i___eq__" "', argument " "2"" of type '" "HokusBlokus::Blokus::Vec2i const &""'"); 
  }
  arg2 = reinterpret_cast< HokusBlokus::Blokus::Vec2i * >(argp2);
  result = (bool)((HokusBlokus::Blokus::Vec2i const *)arg1)->operator ==((HokusBlokus::Blokus::Vec2i const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_Vec2i(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HokusBlokus::Blokus::Vec2i *arg1 = (HokusBlokus::Blokus::Vec2i *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HokusBlokus__Blokus__Vec2i, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Vec2i" "', argument " "1"" of type '" "HokusBlokus::Blokus::Vec2i *""'"); 
  }
  arg1 = reinterpret_cast< HokusBlokus::Blokus::Vec2i * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Vec2i_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HokusBlokus__Blokus__Vec2i, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Vec2i_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SC_Message_Vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_iterator" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___nonzero__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = (bool)std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____nonzero__((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___bool__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = (bool)std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____bool__((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___len__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____len__((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_Message_Vector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___getslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector___getslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SC_Message_Vector___getslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val3);
  try {
    result = (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *)std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___setslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector___setslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SC_Message_Vector___setslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val3);
  try {
    std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg3 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___setslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector___setslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SC_Message_Vector___setslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val3);
  {
    std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *ptr = (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SC_Message_Vector___setslice__" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_Message_Vector___setslice__" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SC_Message_Vector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SC_Message_Vector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SC_Message_Vector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SC_Message_Vector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::__setslice__(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type)\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::__setslice__(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type,std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_Message_Vector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___delslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector___delslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SC_Message_Vector___delslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val3);
  try {
    std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___delitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector___delitem__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val2);
  try {
    std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___getitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *)std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___setitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *ptr = (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SC_Message_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_Message_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___setitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___delitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SC_Message_Vector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SC_Message_Vector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SC_Message_Vector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SC_Message_Vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::__delitem__(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type)\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___getitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector___getitem__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val2);
  try {
    result = (std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *) &std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____getitem____SWIG_1((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SC_Message_Vector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SC_Message_Vector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SC_Message_Vector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SC_Message_Vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::__getitem__(PySliceObject *)\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::__getitem__(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector___setitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector___setitem__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SC_Message_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_Message_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type * >(argp3);
  try {
    std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg____setitem____SWIG_2(arg1,arg2,(HokusBlokus::Blokus::Communication::SC_Message const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SC_Message_Vector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_SC_Message_Vector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SC_Message_Vector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SC_Message_Vector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SC_Message_Vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::__setitem__(PySliceObject *,std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > const &)\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::__setitem__(PySliceObject *)\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::__setitem__(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::difference_type,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_pop" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  try {
    result = std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type(static_cast< const std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type& >(result))), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_Message_Vector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_append" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SC_Message_Vector_append" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_Message_Vector_append" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type * >(argp2);
  std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__append(arg1,(HokusBlokus::Blokus::Communication::SC_Message const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SC_Message_Vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *)new std::vector< HokusBlokus::Blokus::Communication::SC_Message >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SC_Message_Vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *ptr = (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SC_Message_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SC_Message_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *)new std::vector< HokusBlokus::Blokus::Communication::SC_Message >((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_empty" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = (bool)((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_size" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = ((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_Message_Vector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_swap" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SC_Message_Vector_swap" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_Message_Vector_swap" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_begin" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_end" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_rbegin" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Communication::SC_Message >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_rend" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Communication::SC_Message >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_clear" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_get_allocator" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = ((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< HokusBlokus::Blokus::Communication::SC_Message >::allocator_type(static_cast< const std::vector< HokusBlokus::Blokus::Communication::SC_Message >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SC_Message_Vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SC_Message_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type""'");
  } 
  arg1 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type >(val1);
  result = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *)new std::vector< HokusBlokus::Blokus::Communication::SC_Message >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_pop_back" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_resize" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector_resize" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_erase" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator""'");
    }
  }
  result = std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator arg2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_erase" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector_erase" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector_erase" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator""'");
    }
  }
  result = std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SC_Message_Vector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_SC_Message_Vector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_SC_Message_Vector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SC_Message_Vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::erase(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator)\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::erase(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_SC_Message_Vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type arg1 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SC_Message_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type""'");
  } 
  arg1 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SC_Message_Vector" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SC_Message_Vector" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type * >(argp2);
  result = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *)new std::vector< HokusBlokus::Blokus::Communication::SC_Message >(arg1,(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SC_Message_Vector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_SC_Message_Vector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_SC_Message_Vector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SC_Message_Vector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SC_Message_Vector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SC_Message_Vector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_SC_Message_Vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::vector()\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::vector(std::vector< HokusBlokus::Blokus::Communication::SC_Message > const &)\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::vector(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type)\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::vector(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_Message_Vector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_push_back" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SC_Message_Vector_push_back" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_Message_Vector_push_back" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type * >(argp2);
  (arg1)->push_back((std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_front" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = (std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *) &((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_back" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = (std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *) &((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type arg2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_Message_Vector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_assign" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector_assign" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SC_Message_Vector_assign" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_Message_Vector_assign" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type arg2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_resize" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector_resize" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SC_Message_Vector_resize" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_Message_Vector_resize" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SC_Message_Vector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SC_Message_Vector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SC_Message_Vector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SC_Message_Vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::resize(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type)\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::resize(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator arg2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_insert" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SC_Message_Vector_insert" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_Message_Vector_insert" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type * >(argp3);
  result = std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__insert__SWIG_0(arg1,arg2,(HokusBlokus::Blokus::Communication::SC_Message const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator arg2 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type arg3 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_insert" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "SC_Message_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SC_Message_Vector_insert" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SC_Message_Vector_insert" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SC_Message_Vector_insert" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type * >(argp4);
  std_vector_Sl_HokusBlokus_Blokus_Communication_SC_Message_Sg__insert__SWIG_1(arg1,arg2,arg3,(HokusBlokus::Blokus::Communication::SC_Message const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SC_Message_Vector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SC_Message_Vector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HokusBlokus__Blokus__Communication__SC_Message, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SC_Message_Vector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SC_Message_Vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::insert(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &)\n"
    "    std::vector< HokusBlokus::Blokus::Communication::SC_Message >::insert(std::vector< HokusBlokus::Blokus::Communication::SC_Message >::iterator,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type,std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "SC_Message_Vector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_reserve" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SC_Message_Vector_reserve" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SC_Message_Vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SC_Message_Vector_capacity" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  result = ((std::vector< HokusBlokus::Blokus::Communication::SC_Message > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SC_Message_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Communication::SC_Message > *arg1 = (std::vector< HokusBlokus::Blokus::Communication::SC_Message > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SC_Message_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Communication::SC_Message > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Communication::SC_Message > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SC_Message_Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SC_Message_Vector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Move_Vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_iterator" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_HokusBlokus_Blokus_Move_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___nonzero__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = (bool)std_vector_Sl_HokusBlokus_Blokus_Move_Sg____nonzero__((std::vector< HokusBlokus::Blokus::Move > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___bool__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = (bool)std_vector_Sl_HokusBlokus_Blokus_Move_Sg____bool__((std::vector< HokusBlokus::Blokus::Move > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Move >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___len__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = std_vector_Sl_HokusBlokus_Blokus_Move_Sg____len__((std::vector< HokusBlokus::Blokus::Move > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Move_Vector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___getslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector___getslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Move_Vector___getslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val3);
  try {
    result = (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *)std_vector_Sl_HokusBlokus_Blokus_Move_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___setslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector___setslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Move_Vector___setslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val3);
  try {
    std_vector_Sl_HokusBlokus_Blokus_Move_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg3 ;
  std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___setslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector___setslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Move_Vector___setslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val3);
  {
    std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *ptr = (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Move_Vector___setslice__" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_Vector___setslice__" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_Move_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Move_Vector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Move_Vector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Move_Vector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Move_Vector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Move >::__setslice__(std::vector< HokusBlokus::Blokus::Move >::difference_type,std::vector< HokusBlokus::Blokus::Move >::difference_type)\n"
    "    std::vector< HokusBlokus::Blokus::Move >::__setslice__(std::vector< HokusBlokus::Blokus::Move >::difference_type,std::vector< HokusBlokus::Blokus::Move >::difference_type,std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Move_Vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Move_Vector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___delslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector___delslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Move_Vector___delslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val3);
  try {
    std_vector_Sl_HokusBlokus_Blokus_Move_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___delitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector___delitem__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val2);
  try {
    std_vector_Sl_HokusBlokus_Blokus_Move_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___getitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *)std_vector_Sl_HokusBlokus_Blokus_Move_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___setitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *ptr = (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Move_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_Move_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___setitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_Move_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___delitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_Move_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Move_Vector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Move_Vector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Move_Vector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Move_Vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Move >::__delitem__(std::vector< HokusBlokus::Blokus::Move >::difference_type)\n"
    "    std::vector< HokusBlokus::Blokus::Move >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Move_Vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___getitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector___getitem__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val2);
  try {
    result = (std::vector< HokusBlokus::Blokus::Move >::value_type *) &std_vector_Sl_HokusBlokus_Blokus_Move_Sg____getitem____SWIG_1((std::vector< HokusBlokus::Blokus::Move > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Move, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< HokusBlokus::Blokus::Move >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Move_Vector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Move_Vector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Move_Vector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Move_Vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Move >::__getitem__(PySliceObject *)\n"
    "    std::vector< HokusBlokus::Blokus::Move >::__getitem__(std::vector< HokusBlokus::Blokus::Move >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Move_Vector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector___setitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector___setitem__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Move_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move >::value_type * >(argp3);
  try {
    std_vector_Sl_HokusBlokus_Blokus_Move_Sg____setitem____SWIG_2(arg1,arg2,(HokusBlokus::Blokus::Move const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Move_Vector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Move_Vector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Move_Vector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Move_Vector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Move_Vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Move >::__setitem__(PySliceObject *,std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > const &)\n"
    "    std::vector< HokusBlokus::Blokus::Move >::__setitem__(PySliceObject *)\n"
    "    std::vector< HokusBlokus::Blokus::Move >::__setitem__(std::vector< HokusBlokus::Blokus::Move >::difference_type,std::vector< HokusBlokus::Blokus::Move >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Move_Vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Move >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_pop" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  try {
    result = std_vector_Sl_HokusBlokus_Blokus_Move_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< HokusBlokus::Blokus::Move >::value_type(static_cast< const std::vector< HokusBlokus::Blokus::Move >::value_type& >(result))), SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Move_Vector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_append" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Move_Vector_append" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_Vector_append" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move >::value_type * >(argp2);
  std_vector_Sl_HokusBlokus_Blokus_Move_Sg__append(arg1,(HokusBlokus::Blokus::Move const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Move_Vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< HokusBlokus::Blokus::Move > *)new std::vector< HokusBlokus::Blokus::Move >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Move_Vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< HokusBlokus::Blokus::Move > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *ptr = (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Move_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Move_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< HokusBlokus::Blokus::Move > *)new std::vector< HokusBlokus::Blokus::Move >((std::vector< HokusBlokus::Blokus::Move > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_empty" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = (bool)((std::vector< HokusBlokus::Blokus::Move > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Move >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_size" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = ((std::vector< HokusBlokus::Blokus::Move > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Move_Vector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_swap" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Move_Vector_swap" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_Vector_swap" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Move >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_begin" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Move >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Move >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_end" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Move >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Move >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_rbegin" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Move >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Move >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_rend" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Move >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_clear" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< HokusBlokus::Blokus::Move > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_get_allocator" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = ((std::vector< HokusBlokus::Blokus::Move > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< HokusBlokus::Blokus::Move >::allocator_type(static_cast< const std::vector< HokusBlokus::Blokus::Move >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_HokusBlokus__Blokus__Move_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Move_Vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< HokusBlokus::Blokus::Move > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Move_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move >::size_type""'");
  } 
  arg1 = static_cast< std::vector< HokusBlokus::Blokus::Move >::size_type >(val1);
  result = (std::vector< HokusBlokus::Blokus::Move > *)new std::vector< HokusBlokus::Blokus::Move >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_pop_back" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_resize" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector_resize" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< HokusBlokus::Blokus::Move >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_erase" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::iterator""'");
    }
  }
  result = std_vector_Sl_HokusBlokus_Blokus_Move_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Move >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::iterator arg2 ;
  std::vector< HokusBlokus::Blokus::Move >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< HokusBlokus::Blokus::Move >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_erase" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector_erase" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector_erase" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::iterator""'");
    }
  }
  result = std_vector_Sl_HokusBlokus_Blokus_Move_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Move >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Move_Vector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_Move_Vector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_Move_Vector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Move_Vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Move >::erase(std::vector< HokusBlokus::Blokus::Move >::iterator)\n"
    "    std::vector< HokusBlokus::Blokus::Move >::erase(std::vector< HokusBlokus::Blokus::Move >::iterator,std::vector< HokusBlokus::Blokus::Move >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Move_Vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move >::size_type arg1 ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< HokusBlokus::Blokus::Move > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Move_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move >::size_type""'");
  } 
  arg1 = static_cast< std::vector< HokusBlokus::Blokus::Move >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Move_Vector" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Move_Vector" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move >::value_type * >(argp2);
  result = (std::vector< HokusBlokus::Blokus::Move > *)new std::vector< HokusBlokus::Blokus::Move >(arg1,(std::vector< HokusBlokus::Blokus::Move >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Move_Vector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Move_Vector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Move_Vector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Move_Vector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Move_Vector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Move_Vector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Move_Vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Move >::vector()\n"
    "    std::vector< HokusBlokus::Blokus::Move >::vector(std::vector< HokusBlokus::Blokus::Move > const &)\n"
    "    std::vector< HokusBlokus::Blokus::Move >::vector(std::vector< HokusBlokus::Blokus::Move >::size_type)\n"
    "    std::vector< HokusBlokus::Blokus::Move >::vector(std::vector< HokusBlokus::Blokus::Move >::size_type,std::vector< HokusBlokus::Blokus::Move >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Move_Vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Move_Vector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_push_back" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Move_Vector_push_back" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_Vector_push_back" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move >::value_type * >(argp2);
  (arg1)->push_back((std::vector< HokusBlokus::Blokus::Move >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_front" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = (std::vector< HokusBlokus::Blokus::Move >::value_type *) &((std::vector< HokusBlokus::Blokus::Move > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Move, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< HokusBlokus::Blokus::Move >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_back" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = (std::vector< HokusBlokus::Blokus::Move >::value_type *) &((std::vector< HokusBlokus::Blokus::Move > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__Move, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< HokusBlokus::Blokus::Move >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::size_type arg2 ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Move_Vector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_assign" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector_assign" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Move_Vector_assign" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_Vector_assign" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< HokusBlokus::Blokus::Move >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::size_type arg2 ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_resize" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector_resize" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Move_Vector_resize" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_Vector_resize" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< HokusBlokus::Blokus::Move >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Move_Vector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Move_Vector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Move_Vector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Move_Vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Move >::resize(std::vector< HokusBlokus::Blokus::Move >::size_type)\n"
    "    std::vector< HokusBlokus::Blokus::Move >::resize(std::vector< HokusBlokus::Blokus::Move >::size_type,std::vector< HokusBlokus::Blokus::Move >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Move_Vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::iterator arg2 ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< HokusBlokus::Blokus::Move >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_insert" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Move_Vector_insert" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_Vector_insert" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move >::value_type * >(argp3);
  result = std_vector_Sl_HokusBlokus_Blokus_Move_Sg__insert__SWIG_0(arg1,arg2,(HokusBlokus::Blokus::Move const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::Move >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::iterator arg2 ;
  std::vector< HokusBlokus::Blokus::Move >::size_type arg3 ;
  std::vector< HokusBlokus::Blokus::Move >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_insert" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Move_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Move_Vector_insert" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::Move >::size_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::Move >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_HokusBlokus__Blokus__Move,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Move_Vector_insert" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Move_Vector_insert" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::Move >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move >::value_type * >(argp4);
  std_vector_Sl_HokusBlokus_Blokus_Move_Sg__insert__SWIG_1(arg1,arg2,arg3,(HokusBlokus::Blokus::Move const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Move_Vector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Move_Vector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::Move >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HokusBlokus__Blokus__Move, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Move_Vector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Move_Vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::Move >::insert(std::vector< HokusBlokus::Blokus::Move >::iterator,std::vector< HokusBlokus::Blokus::Move >::value_type const &)\n"
    "    std::vector< HokusBlokus::Blokus::Move >::insert(std::vector< HokusBlokus::Blokus::Move >::iterator,std::vector< HokusBlokus::Blokus::Move >::size_type,std::vector< HokusBlokus::Blokus::Move >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Move_Vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  std::vector< HokusBlokus::Blokus::Move >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Move_Vector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_reserve" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Move_Vector_reserve" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::Move >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::Move >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Move_Vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::Move >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Move_Vector_capacity" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  result = ((std::vector< HokusBlokus::Blokus::Move > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Move_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::Move > *arg1 = (std::vector< HokusBlokus::Blokus::Move > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Move_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::Move > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::Move > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Move_Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Move_Vector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_iterator" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___nonzero__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = (bool)std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____nonzero__((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___bool__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = (bool)std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____bool__((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___len__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____len__((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___getslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector___getslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Bitmask_Complement_Vector___getslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val3);
  try {
    result = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *)std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___setslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector___setslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Bitmask_Complement_Vector___setslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val3);
  try {
    std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg3 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___setslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector___setslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Bitmask_Complement_Vector___setslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val3);
  {
    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *ptr = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Bitmask_Complement_Vector___setslice__" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bitmask_Complement_Vector___setslice__" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Bitmask_Complement_Vector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Bitmask_Complement_Vector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bitmask_Complement_Vector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::__setslice__(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type)\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::__setslice__(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___delslice__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector___delslice__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Bitmask_Complement_Vector___delslice__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val3);
  try {
    std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___delitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector___delitem__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val2);
  try {
    std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___getitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *)std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___setitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *ptr = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Bitmask_Complement_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bitmask_Complement_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___setitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___delitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Bitmask_Complement_Vector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Bitmask_Complement_Vector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bitmask_Complement_Vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::__delitem__(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type)\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___getitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector___getitem__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val2);
  try {
    result = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *) &std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____getitem____SWIG_1((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Bitmask_Complement_Vector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Bitmask_Complement_Vector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bitmask_Complement_Vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::__getitem__(PySliceObject *)\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::__getitem__(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type arg2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector___setitem__" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector___setitem__" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Bitmask_Complement_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bitmask_Complement_Vector___setitem__" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type * >(argp3);
  try {
    std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg____setitem____SWIG_2(arg1,arg2,(HokusBlokus::Blokus::PieceBitmaskComplement const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Bitmask_Complement_Vector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Bitmask_Complement_Vector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Bitmask_Complement_Vector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bitmask_Complement_Vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::__setitem__(PySliceObject *,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > const &)\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::__setitem__(PySliceObject *)\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::__setitem__(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::difference_type,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_pop" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  try {
    result = std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type(static_cast< const std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type& >(result))), SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_append" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bitmask_Complement_Vector_append" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bitmask_Complement_Vector_append" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type * >(argp2);
  std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__append(arg1,(HokusBlokus::Blokus::PieceBitmaskComplement const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Bitmask_Complement_Vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *)new std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Bitmask_Complement_Vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *ptr = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Bitmask_Complement_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Bitmask_Complement_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *)new std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_empty" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = (bool)((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_size" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = ((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_swap" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bitmask_Complement_Vector_swap" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bitmask_Complement_Vector_swap" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_begin" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_end" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_rbegin" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_rend" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_clear" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_get_allocator" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = ((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::allocator_type(static_cast< const std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Bitmask_Complement_Vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Bitmask_Complement_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type""'");
  } 
  arg1 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type >(val1);
  result = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *)new std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_pop_back" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_resize" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector_resize" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_erase" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator""'");
    }
  }
  result = std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator arg2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_erase" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector_erase" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector_erase" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector_erase" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator""'");
    }
  }
  result = std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_Bitmask_Complement_Vector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_Bitmask_Complement_Vector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bitmask_Complement_Vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::erase(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator)\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::erase(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Bitmask_Complement_Vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type arg1 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Bitmask_Complement_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type""'");
  } 
  arg1 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Bitmask_Complement_Vector" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Bitmask_Complement_Vector" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type * >(argp2);
  result = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *)new std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >(arg1,(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Bitmask_Complement_Vector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Bitmask_Complement_Vector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Bitmask_Complement_Vector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Bitmask_Complement_Vector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Bitmask_Complement_Vector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_Bitmask_Complement_Vector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Bitmask_Complement_Vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::vector()\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::vector(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const &)\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::vector(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type)\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::vector(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_push_back" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Bitmask_Complement_Vector_push_back" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bitmask_Complement_Vector_push_back" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type * >(argp2);
  (arg1)->push_back((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_front" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *) &((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_back" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *) &((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type arg2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_assign" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector_assign" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Bitmask_Complement_Vector_assign" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bitmask_Complement_Vector_assign" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type arg2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_resize" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector_resize" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Bitmask_Complement_Vector_resize" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bitmask_Complement_Vector_resize" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Bitmask_Complement_Vector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Bitmask_Complement_Vector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bitmask_Complement_Vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::resize(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type)\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::resize(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator arg2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_insert" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Bitmask_Complement_Vector_insert" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bitmask_Complement_Vector_insert" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type * >(argp3);
  result = std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__insert__SWIG_0(arg1,arg2,(HokusBlokus::Blokus::PieceBitmaskComplement const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator arg2 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type arg3 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_insert" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Bitmask_Complement_Vector_insert" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Bitmask_Complement_Vector_insert" "', argument " "3"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type""'");
  } 
  arg3 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Bitmask_Complement_Vector_insert" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Bitmask_Complement_Vector_insert" "', argument " "4"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type * >(argp4);
  std_vector_Sl_HokusBlokus_Blokus_PieceBitmaskComplement_Sg__insert__SWIG_1(arg1,arg2,arg3,(HokusBlokus::Blokus::PieceBitmaskComplement const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Bitmask_Complement_Vector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_HokusBlokus__Blokus__PieceBitmaskComplement, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Bitmask_Complement_Vector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Bitmask_Complement_Vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::insert(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &)\n"
    "    std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::insert(std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::iterator,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type,std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Bitmask_Complement_Vector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_reserve" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Bitmask_Complement_Vector_reserve" "', argument " "2"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type""'");
  } 
  arg2 = static_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Bitmask_Complement_Vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Bitmask_Complement_Vector_capacity" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  result = ((std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Bitmask_Complement_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *arg1 = (std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Bitmask_Complement_Vector" "', argument " "1"" of type '" "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Bitmask_Complement_Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Bitmask_Complement_Vector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Int_Vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_iterator" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___nonzero__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___bool__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)std_vector_Sl_int_Sg____bool__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___len__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = std_vector_Sl_int_Sg____len__((std::vector< int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "Int_Vector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___getslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector___getslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Int_Vector___getslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Int_Vector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___setslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector___setslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Int_Vector___setslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Int_Vector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Int_Vector___setslice__" "', argument " "4"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< int,std::allocator< int > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Int_Vector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Int_Vector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< int,std::allocator< int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Int_Vector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Int_Vector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type)\n"
    "    std::vector< int >::__setslice__(std::vector< int >::difference_type,std::vector< int >::difference_type,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Int_Vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Int_Vector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___delslice__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector___delslice__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Int_Vector___delslice__" "', argument " "3"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< int >::difference_type >(val3);
  try {
    std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector___delitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___getitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< int,std::allocator< int > > *)std_vector_Sl_int_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Int_Vector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Int_Vector___setitem__" "', argument " "3"" of type '" "std::vector< int,std::allocator< int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< int,std::allocator< int > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___delitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_int_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Int_Vector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Int_Vector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Int_Vector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Int_Vector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__delitem__(std::vector< int >::difference_type)\n"
    "    std::vector< int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Int_Vector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___getitem__" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector___getitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg____getitem____SWIG_1((std::vector< int > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Int_Vector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Int_Vector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Int_Vector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Int_Vector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__getitem__(PySliceObject *)\n"
    "    std::vector< int >::__getitem__(std::vector< int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Int_Vector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::difference_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector___setitem__" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector___setitem__" "', argument " "2"" of type '" "std::vector< int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Int_Vector___setitem__" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_int_Sg____setitem____SWIG_2(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Int_Vector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_Int_Vector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< int,std::allocator< int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Int_Vector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Int_Vector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Int_Vector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::__setitem__(PySliceObject *,std::vector< int,std::allocator< int > > const &)\n"
    "    std::vector< int >::__setitem__(PySliceObject *)\n"
    "    std::vector< int >::__setitem__(std::vector< int >::difference_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Int_Vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_pop" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  try {
    result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Int_Vector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_append" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector_append" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Int_Vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< int > *)new std::vector< int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Int_Vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Int_Vector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Int_Vector" "', argument " "1"" of type '" "std::vector< int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_empty" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_size" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Int_Vector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_swap" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Int_Vector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Int_Vector_swap" "', argument " "2"" of type '" "std::vector< int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_begin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_end" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_rbegin" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_rend" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_clear" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< int > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_get_allocator" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< int >::allocator_type(static_cast< const std::vector< int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Int_Vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Int_Vector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_pop_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_erase" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector_erase" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector_erase" "', argument " "3"" of type '" "std::vector< int >::iterator""'");
    }
  }
  result = std_vector_Sl_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Int_Vector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_Int_Vector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_Int_Vector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Int_Vector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::erase(std::vector< int >::iterator)\n"
    "    std::vector< int >::erase(std::vector< int >::iterator,std::vector< int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_Int_Vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< int > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Int_Vector" "', argument " "1"" of type '" "std::vector< int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Int_Vector" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Int_Vector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Int_Vector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Int_Vector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Int_Vector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Int_Vector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Int_Vector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Int_Vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type)\n"
    "    std::vector< int >::vector(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Int_Vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Int_Vector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_push_back" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector_push_back" "', argument " "2"" of type '" "std::vector< int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_front" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->front();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_back" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = (std::vector< int >::value_type *) &((std::vector< int > const *)arg1)->back();
  resultobj = SWIG_From_int(static_cast< int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Int_Vector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_assign" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector_assign" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Int_Vector_assign" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_resize" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector_resize" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Int_Vector_resize" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Int_Vector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Int_Vector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Int_Vector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Int_Vector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::resize(std::vector< int >::size_type)\n"
    "    std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Int_Vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< int >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Int_Vector_insert" "', argument " "3"" of type '" "std::vector< int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< int >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_int_Sg__insert__SWIG_0(arg1,arg2,(int const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::iterator arg2 ;
  std::vector< int >::size_type arg3 ;
  std::vector< int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_insert" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Int_Vector_insert" "', argument " "2"" of type '" "std::vector< int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Int_Vector_insert" "', argument " "3"" of type '" "std::vector< int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Int_Vector_insert" "', argument " "4"" of type '" "std::vector< int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< int >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_int_Sg__insert__SWIG_1(arg1,arg2,arg3,(int const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "Int_Vector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Int_Vector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< int,std::allocator< int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Int_Vector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Int_Vector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::value_type const &)\n"
    "    std::vector< int >::insert(std::vector< int >::iterator,std::vector< int >::size_type,std::vector< int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Int_Vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Int_Vector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_reserve" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Int_Vector_reserve" "', argument " "2"" of type '" "std::vector< int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Int_Vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Int_Vector_capacity" "', argument " "1"" of type '" "std::vector< int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  result = ((std::vector< int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Int_Vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Int_Vector" "', argument " "1"" of type '" "std::vector< int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Int_Vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Int_Vector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "new_Logic", _wrap_new_Logic, METH_O, "Constructs a new Logic."},
	 { "delete_Logic", _wrap_delete_Logic, METH_O, "Destroys a Logic."},
	 { "Logic_GetNextMove", _wrap_Logic_GetNextMove, METH_VARARGS, "\n"
		"Gets the next Move to play. In this method the AI hast to be implemented.\n"
		"\n"
		":type currentGameState: :py:class:`GameState`\n"
		":param currentGameState: The GameState to get the next Move for.\n"
		":type ownPlayerID: int\n"
		":param ownPlayerID: The ID of the Player that is played by the AI.\n"
		":rtype: :py:class:`Move`\n"
		":return: The next move that should be played.\n"
		""},
	 { "Logic_OnGameEnd", _wrap_Logic_OnGameEnd, METH_VARARGS, "\n"
		"Will be executed when a game of Blokus ends.\n"
		"\n"
		":type winningPlayerID: int\n"
		":param winningPlayerID: The ID of the Player that won.\n"
		""},
	 { "disown_Logic", _wrap_disown_Logic, METH_O, NULL},
	 { "Logic_swigregister", Logic_swigregister, METH_O, NULL},
	 { "Logic_swiginit", Logic_swiginit, METH_VARARGS, NULL},
	 { "BenchmarkGPM", _wrap_BenchmarkGPM, METH_O, NULL},
	 { "new_BlokusClient", _wrap_new_BlokusClient, METH_O, "\n"
		"Constructs a new BlokusClient with a Logic.\n"
		"\n"
		":type logic: :py:class:`Logic`\n"
		":param logic: The Logic that implements behaviour of the AI.\n"
		""},
	 { "BlokusClient_Start", _wrap_BlokusClient_Start, METH_VARARGS, "\n"
		"Starts the Client.\n"
		"\n"
		":type argc: int\n"
		":param argc: Number of console arguments.\n"
		":type argv: string\n"
		":param argv: Array of console Arguments.\n"
		""},
	 { "delete_BlokusClient", _wrap_delete_BlokusClient, METH_O, NULL},
	 { "BlokusClient_swigregister", BlokusClient_swigregister, METH_O, NULL},
	 { "BlokusClient_swiginit", BlokusClient_swiginit, METH_VARARGS, NULL},
	 { "new_TCP_Client", _wrap_new_TCP_Client, METH_NOARGS, "Constructs a new TCP_Client."},
	 { "TCP_Client_ConnectWithIP", _wrap_TCP_Client_ConnectWithIP, METH_VARARGS, "\n"
		"Connect to a server.\n"
		"\n"
		":type ipAddress: string\n"
		":param ipAddress: The address of the server.\n"
		":type port: int\n"
		":param port: The port of the server.\n"
		""},
	 { "TCP_Client_Disconnect", _wrap_TCP_Client_Disconnect, METH_O, "Disconnetcs from the server."},
	 { "TCP_Client_ResolveHostnameToIPAddress", _wrap_TCP_Client_ResolveHostnameToIPAddress, METH_VARARGS, "\n"
		"Resolves a hostname to a valid IP address.\n"
		"\n"
		":type hostname: string\n"
		":param hostname: The hostname.\n"
		":rtype: string\n"
		":return: The IP address as a string.\n"
		""},
	 { "TCP_Client_SendMessage", _wrap_TCP_Client_SendMessage, METH_VARARGS, "\n"
		"Sends a string to the server.\n"
		"\n"
		":type message: string\n"
		":param message: The string to send.\n"
		""},
	 { "TCP_Client_ReadMessage", _wrap_TCP_Client_ReadMessage, METH_O, "\n"
		"Receives a string from the server.\n"
		"\n"
		":rtype: string\n"
		":return: The string received from the server.\n"
		""},
	 { "delete_TCP_Client", _wrap_delete_TCP_Client, METH_O, NULL},
	 { "TCP_Client_swigregister", TCP_Client_swigregister, METH_O, NULL},
	 { "TCP_Client_swiginit", TCP_Client_swiginit, METH_VARARGS, NULL},
	 { "new_SC_Message", _wrap_new_SC_Message, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Constructs a new and empty SC_Message.\n"
		"\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Constructs a new SC_Message with given content and type.\n"
		"\n"
		":type messageString: string\n"
		":param messageString: The content of the SC_Message.\n"
		":type messageType: SC_MessageType\n"
		":param messageType: The type of the SC_Message.\n"
		""},
	 { "SC_Message_GetContent", _wrap_SC_Message_GetContent, METH_O, "\n"
		"Gets the content of the SC_Message.\n"
		"\n"
		":rtype: string\n"
		":return: The content of the SC_Message.\n"
		""},
	 { "SC_Message_GetMessageType", _wrap_SC_Message_GetMessageType, METH_O, "\n"
		"Gets the MessageType of the SC_Message.\n"
		"\n"
		":rtype: SC_MessageType\n"
		":return: he MessageType of the SC_Message.\n"
		""},
	 { "delete_SC_Message", _wrap_delete_SC_Message, METH_O, NULL},
	 { "SC_Message_swigregister", SC_Message_swigregister, METH_O, NULL},
	 { "SC_Message_swiginit", SC_Message_swiginit, METH_VARARGS, NULL},
	 { "new_SC_MessageConverter", _wrap_new_SC_MessageConverter, METH_NOARGS, "Constructs a new SC_MessageConverter."},
	 { "SC_MessageConverter_SplitInputMessagesIntoValidSC_Messages", _wrap_SC_MessageConverter_SplitInputMessagesIntoValidSC_Messages, METH_VARARGS, "\n"
		"Splits the incoming messages into SC_Messages.\n"
		"\n"
		":type inputStream: string\n"
		":param inputStream: The message received from the SC-Server.\n"
		":rtype: std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > >\n"
		":return: A vector of SC_Messages.\n"
		""},
	 { "SC_MessageConverter_CreateProtocolMessage", _wrap_SC_MessageConverter_CreateProtocolMessage, METH_O, "\n"
		"Creates a protocol SC_Message.\n"
		"\n"
		":rtype: :py:class:`SC_Message`\n"
		":return: A protocol SC_Message.\n"
		""},
	 { "SC_MessageConverter_CreateProtocolEndMessage", _wrap_SC_MessageConverter_CreateProtocolEndMessage, METH_O, "\n"
		"Creates a protocol end SC_Message.\n"
		"\n"
		":rtype: :py:class:`SC_Message`\n"
		":return: A protocol end SC_Message.\n"
		""},
	 { "SC_MessageConverter_CreateJoinRequestMessage", _wrap_SC_MessageConverter_CreateJoinRequestMessage, METH_O, "\n"
		"Creates a join request SC_Message.\n"
		"\n"
		":rtype: :py:class:`SC_Message`\n"
		":return: A join request SC_Message.\n"
		""},
	 { "SC_MessageConverter_CreateJoinReservedRequestMessage", _wrap_SC_MessageConverter_CreateJoinReservedRequestMessage, METH_VARARGS, "\n"
		"Creates a join reserved SC_Message.\n"
		"\n"
		":type reservationCode: string\n"
		":param reservationCode: The reservation code.\n"
		":rtype: :py:class:`SC_Message`\n"
		":return: A join reserved SC_Message.\n"
		""},
	 { "SC_MessageConverter_CreateMoveMessage", _wrap_SC_MessageConverter_CreateMoveMessage, METH_VARARGS, "\n"
		"Create a move SCMessage.\n"
		"\n"
		":type move: :py:class:`Move`\n"
		":param move: The move.\n"
		":type roomID: string\n"
		":param roomID: The room ID.\n"
		":rtype: :py:class:`SC_Message`\n"
		":return: A move SCMessage.\n"
		""},
	 { "SC_MessageConverter_GetPlayerIDFromWelcomeMessage", _wrap_SC_MessageConverter_GetPlayerIDFromWelcomeMessage, METH_VARARGS, "\n"
		"Gets the Player ID from welcome SC_Messages.\n"
		"\n"
		":type message: :py:class:`SC_Message`\n"
		":param message: The welcome SC_Message.\n"
		":rtype: int\n"
		":return: Player ID in the welcome SC_Message.\n"
		""},
	 { "SC_MessageConverter_GetRoomIDFromJoinedMessage", _wrap_SC_MessageConverter_GetRoomIDFromJoinedMessage, METH_VARARGS, "\n"
		"Gets the room ID from joined SC_Messages.\n"
		"\n"
		":type message: :py:class:`SC_Message`\n"
		":param message: The joined SC_Message.\n"
		":rtype: string\n"
		":return: The room ID.\n"
		""},
	 { "SC_MessageConverter_GetGameStateFromGameStateMessage", _wrap_SC_MessageConverter_GetGameStateFromGameStateMessage, METH_VARARGS, "\n"
		"Gets the GameState from gameState SC_Messages.\n"
		"\n"
		":type message: :py:class:`SC_Message`\n"
		":param message: The gameState SC_Message.\n"
		":rtype: :py:class:`GameState`\n"
		":return: The GameState.\n"
		""},
	 { "SC_MessageConverter_GetIDOfWinningPlayerFromResultMessage", _wrap_SC_MessageConverter_GetIDOfWinningPlayerFromResultMessage, METH_VARARGS, "\n"
		"Gets the ID of the Player that won the game from result SC_Messages.\n"
		"\n"
		":type message: :py:class:`SC_Message`\n"
		":param message: The result SC_Message.\n"
		":rtype: int\n"
		":return: The ID of the Player that won the game.\n"
		""},
	 { "delete_SC_MessageConverter", _wrap_delete_SC_MessageConverter, METH_O, NULL},
	 { "SC_MessageConverter_swigregister", SC_MessageConverter_swigregister, METH_O, NULL},
	 { "SC_MessageConverter_swiginit", SC_MessageConverter_swiginit, METH_VARARGS, NULL},
	 { "new_BoundingRect", _wrap_new_BoundingRect, METH_VARARGS, NULL},
	 { "BoundingRect_GetMinBounds", _wrap_BoundingRect_GetMinBounds, METH_O, NULL},
	 { "BoundingRect_SetMinBounds", _wrap_BoundingRect_SetMinBounds, METH_VARARGS, NULL},
	 { "BoundingRect_GetMaxBounds", _wrap_BoundingRect_GetMaxBounds, METH_O, NULL},
	 { "BoundingRect_SetMaxBounds", _wrap_BoundingRect_SetMaxBounds, METH_VARARGS, NULL},
	 { "delete_BoundingRect", _wrap_delete_BoundingRect, METH_O, NULL},
	 { "BoundingRect_swigregister", BoundingRect_swigregister, METH_O, NULL},
	 { "BoundingRect_swiginit", BoundingRect_swiginit, METH_VARARGS, NULL},
	 { "new_BoundingRectOptimizer", _wrap_new_BoundingRectOptimizer, METH_NOARGS, NULL},
	 { "BoundingRectOptimizer_GetBoundingRect", _wrap_BoundingRectOptimizer_GetBoundingRect, METH_VARARGS, NULL},
	 { "BoundingRectOptimizer_OptimizeBoundingRectOfColor", _wrap_BoundingRectOptimizer_OptimizeBoundingRectOfColor, METH_VARARGS, NULL},
	 { "delete_BoundingRectOptimizer", _wrap_delete_BoundingRectOptimizer, METH_O, NULL},
	 { "BoundingRectOptimizer_swigregister", BoundingRectOptimizer_swigregister, METH_O, NULL},
	 { "BoundingRectOptimizer_swiginit", BoundingRectOptimizer_swiginit, METH_VARARGS, NULL},
	 { "new_Board", _wrap_new_Board, METH_NOARGS, NULL},
	 { "Board_InitStartingBoard", _wrap_Board_InitStartingBoard, METH_O, NULL},
	 { "Board_GetBitmask", _wrap_Board_GetBitmask, METH_VARARGS, NULL},
	 { "Board_SetBitmask", _wrap_Board_SetBitmask, METH_VARARGS, NULL},
	 { "Board_Draw", _wrap_Board_Draw, METH_O, NULL},
	 { "delete_Board", _wrap_delete_Board, METH_O, NULL},
	 { "Board_swigregister", Board_swigregister, METH_O, NULL},
	 { "Board_swiginit", Board_swiginit, METH_VARARGS, NULL},
	 { "ColorToInt", _wrap_ColorToInt, METH_O, NULL},
	 { "ColorToString", _wrap_ColorToString, METH_O, NULL},
	 { "IntToColor", _wrap_IntToColor, METH_O, NULL},
	 { "new_GameState", _wrap_new_GameState, METH_NOARGS, NULL},
	 { "GameState_InitStartingGameState", _wrap_GameState_InitStartingGameState, METH_O, NULL},
	 { "GameState_GetBoard", _wrap_GameState_GetBoard, METH_O, NULL},
	 { "GameState_GetCurrentColor", _wrap_GameState_GetCurrentColor, METH_O, NULL},
	 { "GameState_GetCurrentPlayer", _wrap_GameState_GetCurrentPlayer, METH_O, NULL},
	 { "GameState_GetPlayerWithColor", _wrap_GameState_GetPlayerWithColor, METH_VARARGS, NULL},
	 { "GameState_GetPerformedMoves", _wrap_GameState_GetPerformedMoves, METH_O, NULL},
	 { "GameState_GetLastPerfromedMove", _wrap_GameState_GetLastPerfromedMove, METH_O, NULL},
	 { "GameState_SetLastPerformedMove", _wrap_GameState_SetLastPerformedMove, METH_VARARGS, NULL},
	 { "GameState_GetTurn", _wrap_GameState_GetTurn, METH_O, NULL},
	 { "GameState_SetTurn", _wrap_GameState_SetTurn, METH_VARARGS, NULL},
	 { "GameState_GetStartingPieceShape", _wrap_GameState_GetStartingPieceShape, METH_O, NULL},
	 { "GameState_SetStartingPieceShape", _wrap_GameState_SetStartingPieceShape, METH_VARARGS, NULL},
	 { "GameState_GetPossibleMoves", _wrap_GameState_GetPossibleMoves, METH_O, NULL},
	 { "GameState_PerformMove", _wrap_GameState_PerformMove, METH_VARARGS, NULL},
	 { "GameState_UndoLastMove", _wrap_GameState_UndoLastMove, METH_O, NULL},
	 { "GameState_IsGameOver", _wrap_GameState_IsGameOver, METH_O, NULL},
	 { "GameState_Draw", _wrap_GameState_Draw, METH_O, NULL},
	 { "delete_GameState", _wrap_delete_GameState, METH_O, NULL},
	 { "GameState_swigregister", GameState_swigregister, METH_O, NULL},
	 { "GameState_swiginit", GameState_swiginit, METH_VARARGS, NULL},
	 { "MaskTypeToInt", _wrap_MaskTypeToInt, METH_O, NULL},
	 { "IntToMaskType", _wrap_IntToMaskType, METH_O, NULL},
	 { "new_Move", _wrap_new_Move, METH_VARARGS, NULL},
	 { "Move___eq__", _wrap_Move___eq__, METH_VARARGS, NULL},
	 { "Move___ne__", _wrap_Move___ne__, METH_VARARGS, NULL},
	 { "Move_GetDestination", _wrap_Move_GetDestination, METH_O, NULL},
	 { "Move_GetPieceShape", _wrap_Move_GetPieceShape, METH_O, NULL},
	 { "Move_GetColor", _wrap_Move_GetColor, METH_O, NULL},
	 { "Move_GetMoveType", _wrap_Move_GetMoveType, METH_O, NULL},
	 { "Move_GetComplementNumber", _wrap_Move_GetComplementNumber, METH_O, NULL},
	 { "delete_Move", _wrap_delete_Move, METH_O, NULL},
	 { "Move_swigregister", Move_swigregister, METH_O, NULL},
	 { "Move_swiginit", Move_swiginit, METH_VARARGS, NULL},
	 { "new_Piece", _wrap_new_Piece, METH_O, NULL},
	 { "Piece_GetPieceBitmaskComplements", _wrap_Piece_GetPieceBitmaskComplements, METH_O, NULL},
	 { "delete_Piece", _wrap_delete_Piece, METH_O, NULL},
	 { "Piece_swigregister", Piece_swigregister, METH_O, NULL},
	 { "Piece_swiginit", Piece_swiginit, METH_VARARGS, NULL},
	 { "new_PieceBitmask", _wrap_new_PieceBitmask, METH_VARARGS, NULL},
	 { "PieceBitmask___eq__", _wrap_PieceBitmask___eq__, METH_VARARGS, NULL},
	 { "PieceBitmask_GetBitmask", _wrap_PieceBitmask_GetBitmask, METH_O, NULL},
	 { "PieceBitmask_GetMaskDimensions", _wrap_PieceBitmask_GetMaskDimensions, METH_O, NULL},
	 { "PieceBitmask_GetMaskType", _wrap_PieceBitmask_GetMaskType, METH_O, NULL},
	 { "PieceBitmask_Draw", _wrap_PieceBitmask_Draw, METH_O, NULL},
	 { "delete_PieceBitmask", _wrap_delete_PieceBitmask, METH_O, NULL},
	 { "PieceBitmask_swigregister", PieceBitmask_swigregister, METH_O, NULL},
	 { "PieceBitmask_swiginit", PieceBitmask_swiginit, METH_VARARGS, NULL},
	 { "new_PieceBitmaskComplement", _wrap_new_PieceBitmaskComplement, METH_VARARGS, NULL},
	 { "PieceBitmaskComplement___eq__", _wrap_PieceBitmaskComplement___eq__, METH_VARARGS, NULL},
	 { "PieceBitmaskComplement_GetBitmask", _wrap_PieceBitmaskComplement_GetBitmask, METH_VARARGS, NULL},
	 { "PieceBitmaskComplement_GetRotation", _wrap_PieceBitmaskComplement_GetRotation, METH_O, NULL},
	 { "PieceBitmaskComplement_IsFlipped", _wrap_PieceBitmaskComplement_IsFlipped, METH_O, NULL},
	 { "delete_PieceBitmaskComplement", _wrap_delete_PieceBitmaskComplement, METH_O, NULL},
	 { "PieceBitmaskComplement_swigregister", PieceBitmaskComplement_swigregister, METH_O, NULL},
	 { "PieceBitmaskComplement_swiginit", PieceBitmaskComplement_swiginit, METH_VARARGS, NULL},
	 { "PieceManager_Init", _wrap_PieceManager_Init, METH_O, NULL},
	 { "PieceManager_GetPiece", _wrap_PieceManager_GetPiece, METH_O, NULL},
	 { "delete_PieceManager", _wrap_delete_PieceManager, METH_O, NULL},
	 { "PieceManager_swigregister", PieceManager_swigregister, METH_O, NULL},
	 { "StringToPieceRotation", _wrap_StringToPieceRotation, METH_O, NULL},
	 { "PieceRotationToString", _wrap_PieceRotationToString, METH_O, NULL},
	 { "PieceShapeToInt", _wrap_PieceShapeToInt, METH_O, NULL},
	 { "PieceShapeToString", _wrap_PieceShapeToString, METH_O, NULL},
	 { "IntToPieceShape", _wrap_IntToPieceShape, METH_O, NULL},
	 { "StringToPieceShape", _wrap_StringToPieceShape, METH_O, NULL},
	 { "new_Player", _wrap_new_Player, METH_VARARGS, NULL},
	 { "Player_PopulateUndeployedPieces", _wrap_Player_PopulateUndeployedPieces, METH_O, NULL},
	 { "Player_GetColors", _wrap_Player_GetColors, METH_O, NULL},
	 { "Player_GetUndeployedPieceShapeIDs", _wrap_Player_GetUndeployedPieceShapeIDs, METH_VARARGS, NULL},
	 { "Player_AddUndeployedPieceShape", _wrap_Player_AddUndeployedPieceShape, METH_VARARGS, NULL},
	 { "Player_RemoveUndeployedPieceShape", _wrap_Player_RemoveUndeployedPieceShape, METH_VARARGS, NULL},
	 { "delete_Player", _wrap_delete_Player, METH_O, NULL},
	 { "Player_swigregister", Player_swigregister, METH_O, NULL},
	 { "Player_swiginit", Player_swiginit, METH_VARARGS, NULL},
	 { "Vec2i_x_set", _wrap_Vec2i_x_set, METH_VARARGS, NULL},
	 { "Vec2i_x_get", _wrap_Vec2i_x_get, METH_O, NULL},
	 { "Vec2i_y_set", _wrap_Vec2i_y_set, METH_VARARGS, NULL},
	 { "Vec2i_y_get", _wrap_Vec2i_y_get, METH_O, NULL},
	 { "new_Vec2i", _wrap_new_Vec2i, METH_VARARGS, NULL},
	 { "Vec2i___eq__", _wrap_Vec2i___eq__, METH_VARARGS, NULL},
	 { "delete_Vec2i", _wrap_delete_Vec2i, METH_O, NULL},
	 { "Vec2i_swigregister", Vec2i_swigregister, METH_O, NULL},
	 { "Vec2i_swiginit", Vec2i_swiginit, METH_VARARGS, NULL},
	 { "SC_Message_Vector_iterator", _wrap_SC_Message_Vector_iterator, METH_O, NULL},
	 { "SC_Message_Vector___nonzero__", _wrap_SC_Message_Vector___nonzero__, METH_O, NULL},
	 { "SC_Message_Vector___bool__", _wrap_SC_Message_Vector___bool__, METH_O, NULL},
	 { "SC_Message_Vector___len__", _wrap_SC_Message_Vector___len__, METH_O, NULL},
	 { "SC_Message_Vector___getslice__", _wrap_SC_Message_Vector___getslice__, METH_VARARGS, NULL},
	 { "SC_Message_Vector___setslice__", _wrap_SC_Message_Vector___setslice__, METH_VARARGS, NULL},
	 { "SC_Message_Vector___delslice__", _wrap_SC_Message_Vector___delslice__, METH_VARARGS, NULL},
	 { "SC_Message_Vector___delitem__", _wrap_SC_Message_Vector___delitem__, METH_VARARGS, NULL},
	 { "SC_Message_Vector___getitem__", _wrap_SC_Message_Vector___getitem__, METH_VARARGS, NULL},
	 { "SC_Message_Vector___setitem__", _wrap_SC_Message_Vector___setitem__, METH_VARARGS, NULL},
	 { "SC_Message_Vector_pop", _wrap_SC_Message_Vector_pop, METH_O, NULL},
	 { "SC_Message_Vector_append", _wrap_SC_Message_Vector_append, METH_VARARGS, NULL},
	 { "SC_Message_Vector_empty", _wrap_SC_Message_Vector_empty, METH_O, NULL},
	 { "SC_Message_Vector_size", _wrap_SC_Message_Vector_size, METH_O, NULL},
	 { "SC_Message_Vector_swap", _wrap_SC_Message_Vector_swap, METH_VARARGS, NULL},
	 { "SC_Message_Vector_begin", _wrap_SC_Message_Vector_begin, METH_O, NULL},
	 { "SC_Message_Vector_end", _wrap_SC_Message_Vector_end, METH_O, NULL},
	 { "SC_Message_Vector_rbegin", _wrap_SC_Message_Vector_rbegin, METH_O, NULL},
	 { "SC_Message_Vector_rend", _wrap_SC_Message_Vector_rend, METH_O, NULL},
	 { "SC_Message_Vector_clear", _wrap_SC_Message_Vector_clear, METH_O, NULL},
	 { "SC_Message_Vector_get_allocator", _wrap_SC_Message_Vector_get_allocator, METH_O, NULL},
	 { "SC_Message_Vector_pop_back", _wrap_SC_Message_Vector_pop_back, METH_O, NULL},
	 { "SC_Message_Vector_erase", _wrap_SC_Message_Vector_erase, METH_VARARGS, NULL},
	 { "new_SC_Message_Vector", _wrap_new_SC_Message_Vector, METH_VARARGS, NULL},
	 { "SC_Message_Vector_push_back", _wrap_SC_Message_Vector_push_back, METH_VARARGS, NULL},
	 { "SC_Message_Vector_front", _wrap_SC_Message_Vector_front, METH_O, NULL},
	 { "SC_Message_Vector_back", _wrap_SC_Message_Vector_back, METH_O, NULL},
	 { "SC_Message_Vector_assign", _wrap_SC_Message_Vector_assign, METH_VARARGS, NULL},
	 { "SC_Message_Vector_resize", _wrap_SC_Message_Vector_resize, METH_VARARGS, NULL},
	 { "SC_Message_Vector_insert", _wrap_SC_Message_Vector_insert, METH_VARARGS, NULL},
	 { "SC_Message_Vector_reserve", _wrap_SC_Message_Vector_reserve, METH_VARARGS, NULL},
	 { "SC_Message_Vector_capacity", _wrap_SC_Message_Vector_capacity, METH_O, NULL},
	 { "delete_SC_Message_Vector", _wrap_delete_SC_Message_Vector, METH_O, NULL},
	 { "SC_Message_Vector_swigregister", SC_Message_Vector_swigregister, METH_O, NULL},
	 { "SC_Message_Vector_swiginit", SC_Message_Vector_swiginit, METH_VARARGS, NULL},
	 { "Move_Vector_iterator", _wrap_Move_Vector_iterator, METH_O, NULL},
	 { "Move_Vector___nonzero__", _wrap_Move_Vector___nonzero__, METH_O, NULL},
	 { "Move_Vector___bool__", _wrap_Move_Vector___bool__, METH_O, NULL},
	 { "Move_Vector___len__", _wrap_Move_Vector___len__, METH_O, NULL},
	 { "Move_Vector___getslice__", _wrap_Move_Vector___getslice__, METH_VARARGS, NULL},
	 { "Move_Vector___setslice__", _wrap_Move_Vector___setslice__, METH_VARARGS, NULL},
	 { "Move_Vector___delslice__", _wrap_Move_Vector___delslice__, METH_VARARGS, NULL},
	 { "Move_Vector___delitem__", _wrap_Move_Vector___delitem__, METH_VARARGS, NULL},
	 { "Move_Vector___getitem__", _wrap_Move_Vector___getitem__, METH_VARARGS, NULL},
	 { "Move_Vector___setitem__", _wrap_Move_Vector___setitem__, METH_VARARGS, NULL},
	 { "Move_Vector_pop", _wrap_Move_Vector_pop, METH_O, NULL},
	 { "Move_Vector_append", _wrap_Move_Vector_append, METH_VARARGS, NULL},
	 { "Move_Vector_empty", _wrap_Move_Vector_empty, METH_O, NULL},
	 { "Move_Vector_size", _wrap_Move_Vector_size, METH_O, NULL},
	 { "Move_Vector_swap", _wrap_Move_Vector_swap, METH_VARARGS, NULL},
	 { "Move_Vector_begin", _wrap_Move_Vector_begin, METH_O, NULL},
	 { "Move_Vector_end", _wrap_Move_Vector_end, METH_O, NULL},
	 { "Move_Vector_rbegin", _wrap_Move_Vector_rbegin, METH_O, NULL},
	 { "Move_Vector_rend", _wrap_Move_Vector_rend, METH_O, NULL},
	 { "Move_Vector_clear", _wrap_Move_Vector_clear, METH_O, NULL},
	 { "Move_Vector_get_allocator", _wrap_Move_Vector_get_allocator, METH_O, NULL},
	 { "Move_Vector_pop_back", _wrap_Move_Vector_pop_back, METH_O, NULL},
	 { "Move_Vector_erase", _wrap_Move_Vector_erase, METH_VARARGS, NULL},
	 { "new_Move_Vector", _wrap_new_Move_Vector, METH_VARARGS, NULL},
	 { "Move_Vector_push_back", _wrap_Move_Vector_push_back, METH_VARARGS, NULL},
	 { "Move_Vector_front", _wrap_Move_Vector_front, METH_O, NULL},
	 { "Move_Vector_back", _wrap_Move_Vector_back, METH_O, NULL},
	 { "Move_Vector_assign", _wrap_Move_Vector_assign, METH_VARARGS, NULL},
	 { "Move_Vector_resize", _wrap_Move_Vector_resize, METH_VARARGS, NULL},
	 { "Move_Vector_insert", _wrap_Move_Vector_insert, METH_VARARGS, NULL},
	 { "Move_Vector_reserve", _wrap_Move_Vector_reserve, METH_VARARGS, NULL},
	 { "Move_Vector_capacity", _wrap_Move_Vector_capacity, METH_O, NULL},
	 { "delete_Move_Vector", _wrap_delete_Move_Vector, METH_O, NULL},
	 { "Move_Vector_swigregister", Move_Vector_swigregister, METH_O, NULL},
	 { "Move_Vector_swiginit", Move_Vector_swiginit, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector_iterator", _wrap_Bitmask_Complement_Vector_iterator, METH_O, NULL},
	 { "Bitmask_Complement_Vector___nonzero__", _wrap_Bitmask_Complement_Vector___nonzero__, METH_O, NULL},
	 { "Bitmask_Complement_Vector___bool__", _wrap_Bitmask_Complement_Vector___bool__, METH_O, NULL},
	 { "Bitmask_Complement_Vector___len__", _wrap_Bitmask_Complement_Vector___len__, METH_O, NULL},
	 { "Bitmask_Complement_Vector___getslice__", _wrap_Bitmask_Complement_Vector___getslice__, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector___setslice__", _wrap_Bitmask_Complement_Vector___setslice__, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector___delslice__", _wrap_Bitmask_Complement_Vector___delslice__, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector___delitem__", _wrap_Bitmask_Complement_Vector___delitem__, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector___getitem__", _wrap_Bitmask_Complement_Vector___getitem__, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector___setitem__", _wrap_Bitmask_Complement_Vector___setitem__, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector_pop", _wrap_Bitmask_Complement_Vector_pop, METH_O, NULL},
	 { "Bitmask_Complement_Vector_append", _wrap_Bitmask_Complement_Vector_append, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector_empty", _wrap_Bitmask_Complement_Vector_empty, METH_O, NULL},
	 { "Bitmask_Complement_Vector_size", _wrap_Bitmask_Complement_Vector_size, METH_O, NULL},
	 { "Bitmask_Complement_Vector_swap", _wrap_Bitmask_Complement_Vector_swap, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector_begin", _wrap_Bitmask_Complement_Vector_begin, METH_O, NULL},
	 { "Bitmask_Complement_Vector_end", _wrap_Bitmask_Complement_Vector_end, METH_O, NULL},
	 { "Bitmask_Complement_Vector_rbegin", _wrap_Bitmask_Complement_Vector_rbegin, METH_O, NULL},
	 { "Bitmask_Complement_Vector_rend", _wrap_Bitmask_Complement_Vector_rend, METH_O, NULL},
	 { "Bitmask_Complement_Vector_clear", _wrap_Bitmask_Complement_Vector_clear, METH_O, NULL},
	 { "Bitmask_Complement_Vector_get_allocator", _wrap_Bitmask_Complement_Vector_get_allocator, METH_O, NULL},
	 { "Bitmask_Complement_Vector_pop_back", _wrap_Bitmask_Complement_Vector_pop_back, METH_O, NULL},
	 { "Bitmask_Complement_Vector_erase", _wrap_Bitmask_Complement_Vector_erase, METH_VARARGS, NULL},
	 { "new_Bitmask_Complement_Vector", _wrap_new_Bitmask_Complement_Vector, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector_push_back", _wrap_Bitmask_Complement_Vector_push_back, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector_front", _wrap_Bitmask_Complement_Vector_front, METH_O, NULL},
	 { "Bitmask_Complement_Vector_back", _wrap_Bitmask_Complement_Vector_back, METH_O, NULL},
	 { "Bitmask_Complement_Vector_assign", _wrap_Bitmask_Complement_Vector_assign, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector_resize", _wrap_Bitmask_Complement_Vector_resize, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector_insert", _wrap_Bitmask_Complement_Vector_insert, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector_reserve", _wrap_Bitmask_Complement_Vector_reserve, METH_VARARGS, NULL},
	 { "Bitmask_Complement_Vector_capacity", _wrap_Bitmask_Complement_Vector_capacity, METH_O, NULL},
	 { "delete_Bitmask_Complement_Vector", _wrap_delete_Bitmask_Complement_Vector, METH_O, NULL},
	 { "Bitmask_Complement_Vector_swigregister", Bitmask_Complement_Vector_swigregister, METH_O, NULL},
	 { "Bitmask_Complement_Vector_swiginit", Bitmask_Complement_Vector_swiginit, METH_VARARGS, NULL},
	 { "Int_Vector_iterator", _wrap_Int_Vector_iterator, METH_O, NULL},
	 { "Int_Vector___nonzero__", _wrap_Int_Vector___nonzero__, METH_O, NULL},
	 { "Int_Vector___bool__", _wrap_Int_Vector___bool__, METH_O, NULL},
	 { "Int_Vector___len__", _wrap_Int_Vector___len__, METH_O, NULL},
	 { "Int_Vector___getslice__", _wrap_Int_Vector___getslice__, METH_VARARGS, NULL},
	 { "Int_Vector___setslice__", _wrap_Int_Vector___setslice__, METH_VARARGS, NULL},
	 { "Int_Vector___delslice__", _wrap_Int_Vector___delslice__, METH_VARARGS, NULL},
	 { "Int_Vector___delitem__", _wrap_Int_Vector___delitem__, METH_VARARGS, NULL},
	 { "Int_Vector___getitem__", _wrap_Int_Vector___getitem__, METH_VARARGS, NULL},
	 { "Int_Vector___setitem__", _wrap_Int_Vector___setitem__, METH_VARARGS, NULL},
	 { "Int_Vector_pop", _wrap_Int_Vector_pop, METH_O, NULL},
	 { "Int_Vector_append", _wrap_Int_Vector_append, METH_VARARGS, NULL},
	 { "Int_Vector_empty", _wrap_Int_Vector_empty, METH_O, NULL},
	 { "Int_Vector_size", _wrap_Int_Vector_size, METH_O, NULL},
	 { "Int_Vector_swap", _wrap_Int_Vector_swap, METH_VARARGS, NULL},
	 { "Int_Vector_begin", _wrap_Int_Vector_begin, METH_O, NULL},
	 { "Int_Vector_end", _wrap_Int_Vector_end, METH_O, NULL},
	 { "Int_Vector_rbegin", _wrap_Int_Vector_rbegin, METH_O, NULL},
	 { "Int_Vector_rend", _wrap_Int_Vector_rend, METH_O, NULL},
	 { "Int_Vector_clear", _wrap_Int_Vector_clear, METH_O, NULL},
	 { "Int_Vector_get_allocator", _wrap_Int_Vector_get_allocator, METH_O, NULL},
	 { "Int_Vector_pop_back", _wrap_Int_Vector_pop_back, METH_O, NULL},
	 { "Int_Vector_erase", _wrap_Int_Vector_erase, METH_VARARGS, NULL},
	 { "new_Int_Vector", _wrap_new_Int_Vector, METH_VARARGS, NULL},
	 { "Int_Vector_push_back", _wrap_Int_Vector_push_back, METH_VARARGS, NULL},
	 { "Int_Vector_front", _wrap_Int_Vector_front, METH_O, NULL},
	 { "Int_Vector_back", _wrap_Int_Vector_back, METH_O, NULL},
	 { "Int_Vector_assign", _wrap_Int_Vector_assign, METH_VARARGS, NULL},
	 { "Int_Vector_resize", _wrap_Int_Vector_resize, METH_VARARGS, NULL},
	 { "Int_Vector_insert", _wrap_Int_Vector_insert, METH_VARARGS, NULL},
	 { "Int_Vector_reserve", _wrap_Int_Vector_reserve, METH_VARARGS, NULL},
	 { "Int_Vector_capacity", _wrap_Int_Vector_capacity, METH_O, NULL},
	 { "delete_Int_Vector", _wrap_delete_Int_Vector, METH_O, NULL},
	 { "Int_Vector_swigregister", Int_Vector_swigregister, METH_O, NULL},
	 { "Int_Vector_swiginit", Int_Vector_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_Board = {"_p_Board", "Board *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Color = {"_p_Color", "Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__AI__Logic = {"_p_HokusBlokus__Blokus__AI__Logic", "HokusBlokus::Blokus::AI::Logic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Board = {"_p_HokusBlokus__Blokus__Board", "HokusBlokus::Blokus::Board *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Client__BlokusClient = {"_p_HokusBlokus__Blokus__Client__BlokusClient", "HokusBlokus::Blokus::Client::BlokusClient *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Client__TCP_Client = {"_p_HokusBlokus__Blokus__Client__TCP_Client", "HokusBlokus::Blokus::Client::TCP_Client *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Communication__SC_Message = {"_p_HokusBlokus__Blokus__Communication__SC_Message", "std::vector< HokusBlokus::Blokus::Communication::SC_Message >::value_type *|HokusBlokus::Blokus::Communication::SC_Message *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Communication__SC_MessageConverter = {"_p_HokusBlokus__Blokus__Communication__SC_MessageConverter", "HokusBlokus::Blokus::Communication::SC_MessageConverter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__GameState = {"_p_HokusBlokus__Blokus__GameState", "HokusBlokus::Blokus::GameState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Move = {"_p_HokusBlokus__Blokus__Move", "HokusBlokus::Blokus::Move *|std::vector< HokusBlokus::Blokus::Move >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Optimization__BoundingRect = {"_p_HokusBlokus__Blokus__Optimization__BoundingRect", "HokusBlokus::Blokus::Optimization::BoundingRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer = {"_p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer", "HokusBlokus::Blokus::Optimization::BoundingRectOptimizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Piece = {"_p_HokusBlokus__Blokus__Piece", "HokusBlokus::Blokus::Piece *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__PieceBitmask = {"_p_HokusBlokus__Blokus__PieceBitmask", "HokusBlokus::Blokus::PieceBitmask *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__PieceBitmaskComplement = {"_p_HokusBlokus__Blokus__PieceBitmaskComplement", "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::value_type *|HokusBlokus::Blokus::PieceBitmaskComplement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__PieceManager = {"_p_HokusBlokus__Blokus__PieceManager", "HokusBlokus::Blokus::PieceManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Player = {"_p_HokusBlokus__Blokus__Player", "HokusBlokus::Blokus::Player *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HokusBlokus__Blokus__Vec2i = {"_p_HokusBlokus__Blokus__Vec2i", "HokusBlokus::Blokus::Vec2i *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Move = {"_p_Move", "Move *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MoveType = {"_p_MoveType", "MoveType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PieceRotation = {"_p_PieceRotation", "PieceRotation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PieceShape = {"_p_PieceShape", "PieceShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Player = {"_p_Player", "Player *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SC_MessageType = {"_p_SC_MessageType", "SC_MessageType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vec2i = {"_p_Vec2i", "Vec2i *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t = {"_p_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t", "std::allocator< HokusBlokus::Blokus::Communication::SC_Message > *|std::vector< HokusBlokus::Blokus::Communication::SC_Message >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_HokusBlokus__Blokus__Move_t = {"_p_std__allocatorT_HokusBlokus__Blokus__Move_t", "std::vector< HokusBlokus::Blokus::Move >::allocator_type *|std::allocator< HokusBlokus::Blokus::Move > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t = {"_p_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t", "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement >::allocator_type *|std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_int_t = {"_p_std__allocatorT_int_t", "std::vector< int >::allocator_type *|std::allocator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_HokusBlokus__Blokus__Color_2_t = {"_p_std__arrayT_HokusBlokus__Blokus__Color_2_t", "std::array< enum HokusBlokus::Blokus::Color,2 > *|std::array< HokusBlokus::Blokus::Color,2 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__arrayT_HokusBlokus__Blokus__PieceBitmask_3_t = {"_p_std__arrayT_HokusBlokus__Blokus__PieceBitmask_3_t", "std::array< HokusBlokus::Blokus::PieceBitmask,3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__bitsetT_484_t = {"_p_std__bitsetT_484_t", "std::bitset< 484 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t = {"_p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t", "std::vector< HokusBlokus::Blokus::Communication::SC_Message,std::allocator< HokusBlokus::Blokus::Communication::SC_Message > > *|std::vector< HokusBlokus::Blokus::Communication::SC_Message > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t = {"_p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t", "std::vector< HokusBlokus::Blokus::Move > *|std::vector< HokusBlokus::Blokus::Move,std::allocator< HokusBlokus::Blokus::Move > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t = {"_p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t", "std::vector< HokusBlokus::Blokus::PieceBitmaskComplement > *|std::vector< HokusBlokus::Blokus::PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t = {"_p_std__vectorT_Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t", "std::vector< Move,std::allocator< HokusBlokus::Blokus::Move > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t = {"_p_std__vectorT_PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t", "std::vector< PieceBitmaskComplement,std::allocator< HokusBlokus::Blokus::PieceBitmaskComplement > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *|std::vector< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Board,
  &_swigt__p_Color,
  &_swigt__p_HokusBlokus__Blokus__AI__Logic,
  &_swigt__p_HokusBlokus__Blokus__Board,
  &_swigt__p_HokusBlokus__Blokus__Client__BlokusClient,
  &_swigt__p_HokusBlokus__Blokus__Client__TCP_Client,
  &_swigt__p_HokusBlokus__Blokus__Communication__SC_Message,
  &_swigt__p_HokusBlokus__Blokus__Communication__SC_MessageConverter,
  &_swigt__p_HokusBlokus__Blokus__GameState,
  &_swigt__p_HokusBlokus__Blokus__Move,
  &_swigt__p_HokusBlokus__Blokus__Optimization__BoundingRect,
  &_swigt__p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer,
  &_swigt__p_HokusBlokus__Blokus__Piece,
  &_swigt__p_HokusBlokus__Blokus__PieceBitmask,
  &_swigt__p_HokusBlokus__Blokus__PieceBitmaskComplement,
  &_swigt__p_HokusBlokus__Blokus__PieceManager,
  &_swigt__p_HokusBlokus__Blokus__Player,
  &_swigt__p_HokusBlokus__Blokus__Vec2i,
  &_swigt__p_Move,
  &_swigt__p_MoveType,
  &_swigt__p_PieceRotation,
  &_swigt__p_PieceShape,
  &_swigt__p_Player,
  &_swigt__p_SC_MessageType,
  &_swigt__p_Vec2i,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_p_PyObject,
  &_swigt__p_p_char,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t,
  &_swigt__p_std__allocatorT_HokusBlokus__Blokus__Move_t,
  &_swigt__p_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t,
  &_swigt__p_std__allocatorT_int_t,
  &_swigt__p_std__arrayT_HokusBlokus__Blokus__Color_2_t,
  &_swigt__p_std__arrayT_HokusBlokus__Blokus__PieceBitmask_3_t,
  &_swigt__p_std__bitsetT_484_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t,
  &_swigt__p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t,
  &_swigt__p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t,
  &_swigt__p_std__vectorT_Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t,
  &_swigt__p_std__vectorT_PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Board[] = {  {&_swigt__p_Board, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Color[] = {  {&_swigt__p_Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__AI__Logic[] = {  {&_swigt__p_HokusBlokus__Blokus__AI__Logic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Board[] = {  {&_swigt__p_HokusBlokus__Blokus__Board, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Client__BlokusClient[] = {  {&_swigt__p_HokusBlokus__Blokus__Client__BlokusClient, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Client__TCP_Client[] = {  {&_swigt__p_HokusBlokus__Blokus__Client__TCP_Client, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Communication__SC_Message[] = {  {&_swigt__p_HokusBlokus__Blokus__Communication__SC_Message, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Communication__SC_MessageConverter[] = {  {&_swigt__p_HokusBlokus__Blokus__Communication__SC_MessageConverter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__GameState[] = {  {&_swigt__p_HokusBlokus__Blokus__GameState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Move[] = {  {&_swigt__p_HokusBlokus__Blokus__Move, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Optimization__BoundingRect[] = {  {&_swigt__p_HokusBlokus__Blokus__Optimization__BoundingRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer[] = {  {&_swigt__p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Piece[] = {  {&_swigt__p_HokusBlokus__Blokus__Piece, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__PieceBitmask[] = {  {&_swigt__p_HokusBlokus__Blokus__PieceBitmask, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__PieceBitmaskComplement[] = {  {&_swigt__p_HokusBlokus__Blokus__PieceBitmaskComplement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__PieceManager[] = {  {&_swigt__p_HokusBlokus__Blokus__PieceManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Player[] = {  {&_swigt__p_HokusBlokus__Blokus__Player, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HokusBlokus__Blokus__Vec2i[] = {  {&_swigt__p_HokusBlokus__Blokus__Vec2i, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Move[] = {  {&_swigt__p_Move, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MoveType[] = {  {&_swigt__p_MoveType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PieceRotation[] = {  {&_swigt__p_PieceRotation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PieceShape[] = {  {&_swigt__p_PieceShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Player[] = {  {&_swigt__p_Player, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SC_MessageType[] = {  {&_swigt__p_SC_MessageType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vec2i[] = {  {&_swigt__p_Vec2i, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t[] = {  {&_swigt__p_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_HokusBlokus__Blokus__Move_t[] = {  {&_swigt__p_std__allocatorT_HokusBlokus__Blokus__Move_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t[] = {  {&_swigt__p_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_int_t[] = {  {&_swigt__p_std__allocatorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_HokusBlokus__Blokus__Color_2_t[] = {  {&_swigt__p_std__arrayT_HokusBlokus__Blokus__Color_2_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__arrayT_HokusBlokus__Blokus__PieceBitmask_3_t[] = {  {&_swigt__p_std__arrayT_HokusBlokus__Blokus__PieceBitmask_3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__bitsetT_484_t[] = {  {&_swigt__p_std__bitsetT_484_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t[] = {  {&_swigt__p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t[] = {  {&_swigt__p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t[] = {  {&_swigt__p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t[] = {  {&_swigt__p_std__vectorT_Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t[] = {  {&_swigt__p_std__vectorT_PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Board,
  _swigc__p_Color,
  _swigc__p_HokusBlokus__Blokus__AI__Logic,
  _swigc__p_HokusBlokus__Blokus__Board,
  _swigc__p_HokusBlokus__Blokus__Client__BlokusClient,
  _swigc__p_HokusBlokus__Blokus__Client__TCP_Client,
  _swigc__p_HokusBlokus__Blokus__Communication__SC_Message,
  _swigc__p_HokusBlokus__Blokus__Communication__SC_MessageConverter,
  _swigc__p_HokusBlokus__Blokus__GameState,
  _swigc__p_HokusBlokus__Blokus__Move,
  _swigc__p_HokusBlokus__Blokus__Optimization__BoundingRect,
  _swigc__p_HokusBlokus__Blokus__Optimization__BoundingRectOptimizer,
  _swigc__p_HokusBlokus__Blokus__Piece,
  _swigc__p_HokusBlokus__Blokus__PieceBitmask,
  _swigc__p_HokusBlokus__Blokus__PieceBitmaskComplement,
  _swigc__p_HokusBlokus__Blokus__PieceManager,
  _swigc__p_HokusBlokus__Blokus__Player,
  _swigc__p_HokusBlokus__Blokus__Vec2i,
  _swigc__p_Move,
  _swigc__p_MoveType,
  _swigc__p_PieceRotation,
  _swigc__p_PieceShape,
  _swigc__p_Player,
  _swigc__p_SC_MessageType,
  _swigc__p_Vec2i,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_p_PyObject,
  _swigc__p_p_char,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t,
  _swigc__p_std__allocatorT_HokusBlokus__Blokus__Move_t,
  _swigc__p_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t,
  _swigc__p_std__allocatorT_int_t,
  _swigc__p_std__arrayT_HokusBlokus__Blokus__Color_2_t,
  _swigc__p_std__arrayT_HokusBlokus__Blokus__PieceBitmask_3_t,
  _swigc__p_std__bitsetT_484_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__vectorT_HokusBlokus__Blokus__Communication__SC_Message_std__allocatorT_HokusBlokus__Blokus__Communication__SC_Message_t_t,
  _swigc__p_std__vectorT_HokusBlokus__Blokus__Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t,
  _swigc__p_std__vectorT_HokusBlokus__Blokus__PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t,
  _swigc__p_std__vectorT_Move_std__allocatorT_HokusBlokus__Blokus__Move_t_t,
  _swigc__p_std__vectorT_PieceBitmaskComplement_std__allocatorT_HokusBlokus__Blokus__PieceBitmaskComplement_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
        0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
        0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "SC_MessageType_Protocol",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::Protocol)));
  SWIG_Python_SetConstant(d, "SC_MessageType_ProtocolEnd",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::ProtocolEnd)));
  SWIG_Python_SetConstant(d, "SC_MessageType_Welcome",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::Welcome)));
  SWIG_Python_SetConstant(d, "SC_MessageType_JoinRequest",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::JoinRequest)));
  SWIG_Python_SetConstant(d, "SC_MessageType_JoinRequestPrepared",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::JoinRequestPrepared)));
  SWIG_Python_SetConstant(d, "SC_MessageType_Joined",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::Joined)));
  SWIG_Python_SetConstant(d, "SC_MessageType_GameState",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::GameState)));
  SWIG_Python_SetConstant(d, "SC_MessageType_Move",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::Move)));
  SWIG_Python_SetConstant(d, "SC_MessageType_MoveRequest",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::MoveRequest)));
  SWIG_Python_SetConstant(d, "SC_MessageType_Left",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::Left)));
  SWIG_Python_SetConstant(d, "SC_MessageType_Result",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::Result)));
  SWIG_Python_SetConstant(d, "SC_MessageType_Error",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::Error)));
  SWIG_Python_SetConstant(d, "SC_MessageType_Undefined",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Communication::SC_MessageType::Undefined)));
  SWIG_Python_SetConstant(d, "Color_BLUE",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Color::BLUE)));
  SWIG_Python_SetConstant(d, "Color_YELLOW",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Color::YELLOW)));
  SWIG_Python_SetConstant(d, "Color_RED",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Color::RED)));
  SWIG_Python_SetConstant(d, "Color_GREEN",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::Color::GREEN)));
  SWIG_Python_SetConstant(d, "MaskType_Shape",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::MaskType::Shape)));
  SWIG_Python_SetConstant(d, "MaskType_Corner",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::MaskType::Corner)));
  SWIG_Python_SetConstant(d, "MaskType_Edge",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::MaskType::Edge)));
  SWIG_Python_SetConstant(d, "MoveType_SetMove",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::MoveType::SetMove)));
  SWIG_Python_SetConstant(d, "MoveType_SkipMove",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::MoveType::SkipMove)));
  SWIG_Python_SetConstant(d, "MoveType_PassMove",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::MoveType::PassMove)));
  SWIG_Python_SetConstant(d, "PieceRotation_NONE",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceRotation::NONE)));
  SWIG_Python_SetConstant(d, "PieceRotation_RIGHT",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceRotation::RIGHT)));
  SWIG_Python_SetConstant(d, "PieceRotation_MIRROR",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceRotation::MIRROR)));
  SWIG_Python_SetConstant(d, "PieceRotation_LEFT",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceRotation::LEFT)));
  SWIG_Python_SetConstant(d, "PieceShape_MONOMINO",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::MONOMINO)));
  SWIG_Python_SetConstant(d, "PieceShape_DOMINO",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::DOMINO)));
  SWIG_Python_SetConstant(d, "PieceShape_TRIO_L",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::TRIO_L)));
  SWIG_Python_SetConstant(d, "PieceShape_TRIO_I",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::TRIO_I)));
  SWIG_Python_SetConstant(d, "PieceShape_TETRO_I",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::TETRO_I)));
  SWIG_Python_SetConstant(d, "PieceShape_TETRO_L",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::TETRO_L)));
  SWIG_Python_SetConstant(d, "PieceShape_TETRO_O",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::TETRO_O)));
  SWIG_Python_SetConstant(d, "PieceShape_TETRO_T",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::TETRO_T)));
  SWIG_Python_SetConstant(d, "PieceShape_TETRO_Z",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::TETRO_Z)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_I",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_I)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_U",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_U)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_L",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_L)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_V",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_V)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_P",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_P)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_W",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_W)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_R",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_R)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_X",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_X)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_Z",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_Z)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_Y",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_Y)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_T",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_T)));
  SWIG_Python_SetConstant(d, "PieceShape_PENTO_S",SWIG_From_int(static_cast< int >(HokusBlokus::Blokus::PieceShape::PENTO_S)));
  
  // thread safe initialization
  swig::container_owner_attribute();
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

